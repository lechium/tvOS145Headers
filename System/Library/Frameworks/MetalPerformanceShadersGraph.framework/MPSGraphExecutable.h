/*
                       * This header is generated by classdump-dyld 1.5
                       * on Wednesday, April 28, 2021 at 9:10:10 PM Mountain Standard Time
                       * Operating System: Version 14.5 (Build 18L204)
                       * Image Source: /System/Library/Frameworks/MetalPerformanceShadersGraph.framework/MetalPerformanceShadersGraph
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
                       */


#import <MetalPerformanceShadersGraph/MetalPerformanceShadersGraph-Structs.h>
@class MPSGraph, NSArray, NSDictionary;

@interface MPSGraphExecutable : NSObject {

	MPSGraph* _graph;
	MLIRContext* _context;
	OpBuilder* _builder;
	OwningModuleRef* _originalModule;
	MPSSymbolTable=StringMap<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, llvm::MallocAllocator>=StringMapEntryBase}IIIIMallocAllocator}}Ref _symbolTable;
	unsigned long long _compilerOptions;
	unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime>>>>>* _runtimeCache;
	unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, mlir::OwningModuleRef>>>* _optimizedModuleCache;
	opaque_pthread_mutex_t _executableMutex;
	NSArray* _targetTensorArray;
	NSArray* _targetOperations;
	NSArray* _feedTensorArray;
	NSDictionary* _feeds;
	unsigned long long _options;

}

@property (assign) unsigned long long options;              //@synthesize options=_options - In the implementation block
-(id)debugDescription;
-(void)dealloc;
-(unsigned long long)options;
-(void)setOptions:(unsigned long long)arg1 ;
-(void)dump;
-(BOOL)isExecutableForFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3 ;
-(id)initWithGraph:(id)arg1 feeds:(id)arg2 targetTensors:(id)arg3 targetOperations:(id)arg4 ;
-(id)runInternalWithMPSCommandBuffer:(id)arg1 feedsDictionary:(id)arg2 resultsDictionary:(id)arg3 executionDescriptor:(id)arg4 ;
-(void)recurseFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3 ;
-(void)specializeWithDevice:(id)arg1 inputShapes:(id)arg2 ;
-(void)initializeCommon;
-(id)initializeWithMLIRModule:(ModuleOp*)arg1 executableDescriptor:(id)arg2 ;
-(id)initWithMLIRSource:(id)arg1 executableDescriptor:(id)arg2 ;
-(void)recurseOperation:(id)arg1 operationsRecursed:(id)arg2 tensorToValueMap:(map<MPSGraphTensor *, mlir::Value, std::__1::less<MPSGraphTensor *>, std::__1::allocator<std::__1::pair<MPSGraphTensor *const, mlir::Value>>>*)arg3 ;
-(void)optimizationPasses:(ModuleOp*)arg1 ;
-(ModuleOp*)specializedModuleWithDevice:(id)arg1 inputShapes:(id)arg2 ;
-(ModuleOp*)specializeWithDevice:(id)arg1 inputsArray:(id)arg2 ;
-(GPURuntime*)getRuntimeForDevice:(id)arg1 module:(ModuleOp*)arg2 ;
-(id)allocateTargetsForDevice:(id)arg1 inputsArray:(id)arg2 ;
-(void)encodeInternalWithMPSCommandBuffer:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4 ;
-(id)runAsyncWithCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4 ;
-(id)initWithMLIRModule:(ModuleOp*)arg1 executableDescriptor:(id)arg2 ;
-(id)initWithMLIRSourceFromURL:(id)arg1 executableDescriptor:(id)arg2 ;
-(void)sanitizeExternalModuleWithVariableFetchHandler:(/*^block*/id)arg1 ;
-(BOOL)inputShapesSpecialized;
-(id)runWithCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 ;
@end

