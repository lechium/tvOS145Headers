/*
                       * This header is generated by classdump-dyld 1.5
                       * on Wednesday, April 28, 2021 at 9:07:07 PM Mountain Standard Time
                       * Operating System: Version 14.5 (Build 18L204)
                       * Image Source: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore
                       * classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos. Updated by Kevin Bradley.
                       */

#import <libobjc.A.dylib/MFPlaybackStackControllerDelegate.h>
#import <libobjc.A.dylib/MPAVQueueControllerDelegate.h>
#import <libobjc.A.dylib/MPCAssetLoaderDelegate.h>
#import <libobjc.A.dylib/MPCPlaybackEngineImplementation.h>

@protocol MPAVQueueController, MFPlaybackStackControllerMFQueueManagement, MFAssetLoading;
@class MPCPlaybackEngine, MPAVItem, MPQueuePlayer, MPCItemBookmarker, MPCMediaFoundationTranslator, MPCErrorControllerImplementation, MPCExternalPlaybackControllerImplementation, MPCLeaseController, AVPlayerViewController, NSDictionary, NSString;

@interface _MPCPlaybackEngineMediaFoundationImplementation : NSObject <MFPlaybackStackControllerDelegate, MPAVQueueControllerDelegate, MPCAssetLoaderDelegate, MPCPlaybackEngineImplementation> {

	BOOL _hasPlayedSuccessfully;
	BOOL _autoPlayWhenLikelyToKeepUp;
	BOOL _reloadingPlaybackContext;
	float _currentRate;
	MPCPlaybackEngine* _playbackEngine;
	id<MPAVQueueController> _queueController;
	MPAVItem* _currentItem;
	MPQueuePlayer* _queuePlayer;
	double _currentTime;
	long long _state;
	long long _stateBeforeInterruption;
	long long _actionAtQueueEnd;
	id<MFPlaybackStackController><MFQueueManagement> _playbackStackController;
	MPCItemBookmarker* _bookmarker;
	MPCMediaFoundationTranslator* _translator;
	MPCErrorControllerImplementation* _errorController;
	MPCExternalPlaybackControllerImplementation* _externalPlaybackController;
	id<MFAssetLoading> _assetLoader;
	MPCLeaseController* _leaseController;
	unsigned long long _stateHandle;

}

@property (nonatomic,retain) id<MFPlaybackStackController><MFQueueManagement> playbackStackController;              //@synthesize playbackStackController=_playbackStackController - In the implementation block
@property (nonatomic,retain) MPCItemBookmarker * bookmarker;                                                        //@synthesize bookmarker=_bookmarker - In the implementation block
@property (nonatomic,retain) MPCMediaFoundationTranslator * translator;                                             //@synthesize translator=_translator - In the implementation block
@property (nonatomic,retain) MPCErrorControllerImplementation * errorController;                                    //@synthesize errorController=_errorController - In the implementation block
@property (nonatomic,retain) MPCExternalPlaybackControllerImplementation * externalPlaybackController;              //@synthesize externalPlaybackController=_externalPlaybackController - In the implementation block
@property (nonatomic,retain) id<MFAssetLoading> assetLoader;                                                        //@synthesize assetLoader=_assetLoader - In the implementation block
@property (nonatomic,retain) MPCLeaseController * leaseController;                                                  //@synthesize leaseController=_leaseController - In the implementation block
@property (assign,nonatomic) unsigned long long stateHandle;                                                        //@synthesize stateHandle=_stateHandle - In the implementation block
@property (nonatomic,readonly) AVPlayerViewController * playerViewController; 
@property (nonatomic,readonly) NSDictionary * _stateDictionary; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,__weak,readonly) MPCPlaybackEngine * playbackEngine;                                           //@synthesize playbackEngine=_playbackEngine - In the implementation block
@property (nonatomic,retain) id<MPAVQueueController> queueController;                                               //@synthesize queueController=_queueController - In the implementation block
@property (nonatomic,readonly) MPAVItem * currentItem;                                                              //@synthesize currentItem=_currentItem - In the implementation block
@property (nonatomic,readonly) MPQueuePlayer * queuePlayer;                                                         //@synthesize queuePlayer=_queuePlayer - In the implementation block
@property (assign,nonatomic) double currentTime;                                                                    //@synthesize currentTime=_currentTime - In the implementation block
@property (nonatomic,readonly) float currentRate;                                                                   //@synthesize currentRate=_currentRate - In the implementation block
@property (nonatomic,readonly) long long state;                                                                     //@synthesize state=_state - In the implementation block
@property (nonatomic,readonly) long long stateBeforeInterruption;                                                   //@synthesize stateBeforeInterruption=_stateBeforeInterruption - In the implementation block
@property (assign,nonatomic) BOOL hasPlayedSuccessfully;                                                            //@synthesize hasPlayedSuccessfully=_hasPlayedSuccessfully - In the implementation block
@property (assign,nonatomic) BOOL autoPlayWhenLikelyToKeepUp;                                                       //@synthesize autoPlayWhenLikelyToKeepUp=_autoPlayWhenLikelyToKeepUp - In the implementation block
@property (assign,nonatomic) long long actionAtQueueEnd;                                                            //@synthesize actionAtQueueEnd=_actionAtQueueEnd - In the implementation block
@property (getter=isReloadingPlaybackContext,nonatomic,readonly) BOOL reloadingPlaybackContext;                     //@synthesize reloadingPlaybackContext=_reloadingPlaybackContext - In the implementation block
+(id)describePlayer:(id)arg1 ;
-(void)dealloc;
-(long long)state;
-(void)pause;
-(MPAVItem *)currentItem;
-(double)currentTime;
-(void)setCurrentTime:(double)arg1 ;
-(unsigned long long)stateHandle;
-(void)setStateHandle:(unsigned long long)arg1 ;
-(void)queueControllerDidChangeContents:(id)arg1 ;
-(void)queueController:(id)arg1 failedToLoadItem:(id)arg2 ;
-(void)queueController:(id)arg1 didChangeContentsWithReplacementPlaybackContext:(id)arg2 ;
-(void)queueController:(id)arg1 didChangeRepeatType:(long long)arg2 ;
-(void)queueController:(id)arg1 didChangeShuffleType:(long long)arg2 ;
-(void)queueController:(id)arg1 didChangeActionAtQueueEnd:(long long)arg2 ;
-(void)queueController:(id)arg1 didIncrementVersionForSegment:(id)arg2 ;
-(BOOL)changePlaybackIndexBy:(long long)arg1 deltaType:(long long)arg2 ignoreElapsedTime:(BOOL)arg3 force:(BOOL)arg4 error:(id*)arg5 ;
-(void)endPlayback;
-(void)pauseWithFadeout:(float)arg1 ;
-(void)playWithOptions:(unsigned long long)arg1 ;
-(void)setAutoPlayWhenLikelyToKeepUp:(BOOL)arg1 ;
-(BOOL)autoPlayWhenLikelyToKeepUp;
-(BOOL)becomeActiveWithError:(id*)arg1 ;
-(void)loadSessionWithQueueController:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(MPQueuePlayer *)queuePlayer;
-(id<MPAVQueueController>)queueController;
-(long long)stateBeforeInterruption;
-(AVPlayerViewController *)playerViewController;
-(void)_setupPlaybackStackWithPlaybackEngine:(id)arg1 queueController:(id)arg2 ;
-(NSDictionary *)_stateDictionary;
-(MPCErrorControllerImplementation *)errorController;
-(id<MFPlaybackStackController><MFQueueManagement>)playbackStackController;
-(MPCMediaFoundationTranslator *)translator;
-(MPCPlaybackEngine *)playbackEngine;
-(void)setQueueWithPlaybackContext:(id)arg1 identifier:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)_resetPlaybackStack;
-(void)skipWithDirection:(long long)arg1 identifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_updateAudioSessionForItem:(id)arg1 ;
-(id)_MPAVItemForMFQueuePlayerItem:(id)arg1 ;
-(void)endPlaybackWithIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)playWithRate:(float)arg1 identifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)pauseWithIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(MPCItemBookmarker *)bookmarker;
-(void)beginScanningWithDirection:(long long)arg1 identifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)endScanningWithIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)setRate:(float)arg1 identifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)setPlaybackStackController:(id<MFPlaybackStackController><MFQueueManagement>)arg1 ;
-(void)updateAudioSession;
-(void)_logTimeJumpForItem:(id)arg1 fromTime:(double)arg2 toTime:(double)arg3 userInitiated:(BOOL)arg4 timeStamp:(id)arg5 ;
-(void)_playbackDidStopForItem:(id)arg1 time:(double)arg2 ;
-(void)currentItemWillChangeFromItem:(id)arg1 toItem:(id)arg2 source:(long long)arg3 timeStamp:(id)arg4 ;
-(void)itemIsReadyToPlay:(id)arg1 timeStamp:(id)arg2 ;
-(void)itemDidFailToLoad:(id)arg1 error:(id)arg2 timeStamp:(id)arg3 ;
-(void)itemDidFailToPlayToEnd:(id)arg1 error:(id)arg2 timeStamp:(id)arg3 ;
-(void)itemDidBecomeCurrent:(id)arg1 source:(long long)arg2 timeStamp:(id)arg3 ;
-(void)itemDidResignCurrent:(id)arg1 source:(long long)arg2 timeStamp:(id)arg3 ;
-(void)playbackDidStartForItem:(id)arg1 rate:(float)arg2 fromStalling:(BOOL)arg3 timeStamp:(id)arg4 ;
-(void)playbackDidStopForItem:(id)arg1 timeStamp:(id)arg2 ;
-(void)playbackWaitingToPlayForItem:(id)arg1 reason:(id)arg2 timeStamp:(id)arg3 ;
-(void)itemDidPlayToEnd:(id)arg1 timeStamp:(id)arg2 ;
-(void)playbackTimeDidChangeTo:(double)arg1 forItem:(id)arg2 reason:(long long)arg3 timeStamp:(id)arg4 ;
-(void)playbackRateDidChangeToRate:(float)arg1 forItem:(id)arg2 timeStamp:(id)arg3 ;
-(void)playbackIsLikelyToKeepUp:(BOOL)arg1 forItem:(id)arg2 timeStamp:(id)arg3 ;
-(void)playbackBufferStateDidChangeToState:(long long)arg1 forItem:(id)arg2 timeStamp:(id)arg3 ;
-(void)tracksDidChangeForItem:(id)arg1 timeStamp:(id)arg2 ;
-(void)didReachEndOfQueueWithReason:(id)arg1 ;
-(void)interruptionDidBeginWithInterruptor:(id)arg1 timeStamp:(id)arg2 ;
-(void)interruptionDidFinishForInterruptor:(id)arg1 shouldResume:(BOOL)arg2 timeStamp:(id)arg3 ;
-(void)routeDidChange:(BOOL)arg1 metadata:(id)arg2 timeStamp:(id)arg3 ;
-(void)stateDidChangeFromState:(long long)arg1 toState:(long long)arg2 timeStamp:(id)arg3 ;
-(void)screenRecordingDidChange:(BOOL)arg1 timeStamp:(id)arg2 ;
-(void)userActionDidBegin:(id)arg1 ;
-(void)userActionDidEnd:(id)arg1 error:(id)arg2 ;
-(void)mediaServicesInterruptionDidBeginWithItemAtDeath:(id)arg1 timeAtDeath:(double)arg2 timeStamp:(id)arg3 ;
-(void)mediaServicesInterruptionDidEndWithTimeStamp:(id)arg1 ;
-(void)playbackIsBlockedOnNonPlayableItem:(id)arg1 ;
-(void)userSeekCompletedForItem:(id)arg1 fromTime:(double)arg2 toTime:(double)arg3 timeStamp:(id)arg4 ;
-(void)assetLoadingDidStartForItem:(id)arg1 ;
-(void)assetLoadingDidCompleteForItem:(id)arg1 error:(id)arg2 ;
-(id)initWithPlaybackEngine:(id)arg1 ;
-(void)reloadWithPlaybackContext:(id)arg1 identifier:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)replaceCurrentItemWithPlaybackContext:(id)arg1 identifier:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)setQueueController:(id<MPAVQueueController>)arg1 ;
-(float)currentRate;
-(BOOL)hasPlayedSuccessfully;
-(void)setHasPlayedSuccessfully:(BOOL)arg1 ;
-(long long)actionAtQueueEnd;
-(void)setActionAtQueueEnd:(long long)arg1 ;
-(BOOL)isReloadingPlaybackContext;
-(void)beginUsingVideoLayer;
-(void)endUsingVideoLayer;
-(void)pauseWithFadeout:(double)arg1 identifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)togglePlaybackWithIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(BOOL)skipWithDirectionShouldJumpToItemStart:(long long)arg1 ;
-(void)jumpToTime:(double)arg1 identifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)playbackDidReachQueueEndWithTimeStamp:(id)arg1 ;
-(void)firstVideoFrameWasRenderedForItem:(id)arg1 timeStamp:(id)arg2 ;
-(void)setBookmarker:(MPCItemBookmarker *)arg1 ;
-(void)setTranslator:(MPCMediaFoundationTranslator *)arg1 ;
-(void)setErrorController:(MPCErrorControllerImplementation *)arg1 ;
-(MPCExternalPlaybackControllerImplementation *)externalPlaybackController;
-(void)setExternalPlaybackController:(MPCExternalPlaybackControllerImplementation *)arg1 ;
-(id<MFAssetLoading>)assetLoader;
-(void)setAssetLoader:(id<MFAssetLoading>)arg1 ;
-(MPCLeaseController *)leaseController;
-(void)setLeaseController:(MPCLeaseController *)arg1 ;
@end

