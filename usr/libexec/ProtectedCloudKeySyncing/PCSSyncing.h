//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "PCSSyncingProtocol-Protocol.h"

@class AccountsModel, NSOperationQueue, NSUserDefaults, PCSDelayedAction, PCSKeySyncing, PCSMobileBackup, PCSUserRegistry;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_xpc_object;

@interface PCSSyncing : NSObject <PCSSyncingProtocol>
{
    NSObject<OS_dispatch_queue> *_internalQueue;	// 8 = 0x8
    PCSUserRegistry *_registry;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_registryQueue;	// 24 = 0x18
    PCSKeySyncing *_manager;	// 32 = 0x20
    AccountsModel *_accounts;	// 40 = 0x28
    PCSDelayedAction *_triggerWatchSyncingAction;	// 48 = 0x30
    NSOperationQueue *_serialOperationQueue;	// 56 = 0x38
    NSUserDefaults *_settings;	// 64 = 0x40
    PCSMobileBackup *_mobileBackup;	// 72 = 0x48
    NSObject<OS_dispatch_source> *_keyrollSchedulerSource;	// 80 = 0x50
    NSObject<OS_xpc_object> *_scheduledKeyrollActivity;	// 88 = 0x58
}

+ (id)defaultPCSSyncing;	// IMP=0x0000000100011078
- (void).cxx_destruct;	// IMP=0x0000000100016b94
@property(retain) NSObject<OS_xpc_object> *scheduledKeyrollActivity; // @synthesize scheduledKeyrollActivity=_scheduledKeyrollActivity;
@property(retain) NSObject<OS_dispatch_source> *keyrollSchedulerSource; // @synthesize keyrollSchedulerSource=_keyrollSchedulerSource;
@property(retain) PCSMobileBackup *mobileBackup; // @synthesize mobileBackup=_mobileBackup;
@property(retain) NSUserDefaults *settings; // @synthesize settings=_settings;
@property(retain) NSOperationQueue *serialOperationQueue; // @synthesize serialOperationQueue=_serialOperationQueue;
@property(retain) PCSDelayedAction *triggerWatchSyncingAction; // @synthesize triggerWatchSyncingAction=_triggerWatchSyncingAction;
@property(retain) AccountsModel *accounts; // @synthesize accounts=_accounts;
@property(retain) PCSKeySyncing *manager; // @synthesize manager=_manager;
@property(retain) NSObject<OS_dispatch_queue> *registryQueue; // @synthesize registryQueue=_registryQueue;
@property(retain) PCSUserRegistry *registry; // @synthesize registry=_registry;
@property(retain) NSObject<OS_dispatch_queue> *internalQueue; // @synthesize internalQueue=_internalQueue;
- (void)keyRollPending:(id)arg1 complete:(CDUnknownBlockType)arg2;	// IMP=0x0000000100016a18
- (void)manateeStatus:(id)arg1 complete:(CDUnknownBlockType)arg2;	// IMP=0x00000001000160b0
- (void)fetchStats:(CDUnknownBlockType)arg1;	// IMP=0x0000000100016050
- (void)userDBBackupRecordIDsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x000000010001603c
- (void)mobileBackupRecordIDsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000100016028
- (void)escrowRecordIDs:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015fb8
- (void)deleteThisDevice:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015f50
- (void)triggerUserRegistryCheck:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015f44
- (void)restoreMobileBackup:(_Bool)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015550
- (void)fetchAllDeviceKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015494
- (void)checkSyncingForPeer:(id)arg1 force:(_Bool)arg2;	// IMP=0x0000000100015490
- (void)triggerDaily:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015430
- (void)requestKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00000001000153a0
- (void)syncKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0000000100015388
- (void)getAllClients:(CDUnknownBlockType)arg1;	// IMP=0x0000000100015184
- (void)queuedCheckRegistry:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x000000010001511c
- (void)notifyEvent:(id)arg1;	// IMP=0x0000000100015054
- (void)notifyDailyEvent;	// IMP=0x0000000100014f7c
- (struct _PCSIdentitySetData *)identityCopySet;	// IMP=0x0000000100014d68
- (void)createIdentity:(id)arg1 roll:(_Bool)arg2 sync:(_Bool)arg3 complete:(CDUnknownBlockType)arg4;	// IMP=0x0000000100014620
- (void)migrateToiCDPForAccount:(id)arg1 withParameters:(id)arg2 complete:(CDUnknownBlockType)arg3;	// IMP=0x0000000100014450
- (void)setupIdentitiesForAccount:(id)arg1 withParameters:(id)arg2 optional:(_Bool)arg3;	// IMP=0x000000010001416c
- (void)triggerSyncingWithEscrowProxy:(id)arg1 complete:(CDUnknownBlockType)arg2;	// IMP=0x0000000100013368
- (void)triggerKeyRolling;	// IMP=0x00000001000129ec
- (id)getServicesToRoll;	// IMP=0x0000000100012780
- (void)actuallyScheduleRollAttempt;	// IMP=0x0000000100012670
- (void)scheduleRollAttempt;	// IMP=0x0000000100012634
- (long long)attemptTimer;	// IMP=0x0000000100012564
- (_Bool)shouldRoll;	// IMP=0x0000000100012494
- (void)checkForBackupStateChange;	// IMP=0x0000000100011f04
- (void)recordEpochForKeyroll;	// IMP=0x0000000100011e84
- (id)getRollEpoch;	// IMP=0x0000000100011d44
- (void)mobileBackupStatus:(CDUnknownBlockType)arg1;	// IMP=0x0000000100011cc4
- (void)clearNextSyncNegativeCache;	// IMP=0x0000000100011c7c
- (void)notifyInternalEvent:(id)arg1;	// IMP=0x0000000100011908
- (void)triggerWatchSyncing:(CDUnknownBlockType)arg1;	// IMP=0x00000001000118fc
- (void)notifyKeyRegistry;	// IMP=0x00000001000118f8
- (void)triggerWatchSyncing;	// IMP=0x00000001000118b8
- (void)setupMetrics;	// IMP=0x00000001000118b4
- (void)setupActivity;	// IMP=0x00000001000117a8
- (id)initWithPCSKeySyncing:(id)arg1;	// IMP=0x00000001000112a4
- (id)initForTesting;	// IMP=0x000000010001116c

@end

