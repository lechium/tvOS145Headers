//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CSAudioAlertProviding-Protocol.h"
#import "CSAudioMeterProviding-Protocol.h"
#import "CSAudioMetricProviding-Protocol.h"
#import "CSAudioPreprocessorDelegate-Protocol.h"
#import "CSAudioRecorderDelegate-Protocol.h"
#import "CSAudioServerCrashMonitorDelegate-Protocol.h"
#import "CSAudioSessionProviding-Protocol.h"
#import "CSAudioStreamProviding-Protocol.h"
#import "CSTriggerInfoProviding-Protocol.h"

@class CSAudioCircularBuffer, CSAudioPreprocessor, CSAudioRecordContext, CSAudioRecorder, CSOSTransaction, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSUUID;
@protocol CSAudioAlertProvidingDelegate, CSAudioProviderDelegate, CSAudioSessionProvidingDelegate, OS_dispatch_group, OS_dispatch_queue;

@interface CSAudioProvider : NSObject <CSAudioRecorderDelegate, CSAudioServerCrashMonitorDelegate, CSAudioPreprocessorDelegate, CSAudioStreamProviding, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioAlertProviding, CSAudioMeterProviding, CSTriggerInfoProviding>
{
    _Bool _audioSystemRecovering;	// 8 = 0x8
    _Bool _waitingForAlertFinish;	// 9 = 0x9
    NSString *_UUID;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_recordQueue;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_loggingQueue;	// 32 = 0x20
    CSAudioRecorder *_audioRecorder;	// 40 = 0x28
    unsigned long long _streamState;	// 48 = 0x30
    NSHashTable *_startPendingStreams;	// 56 = 0x38
    NSHashTable *_startPendingOnStoppingStreams;	// 64 = 0x40
    NSHashTable *_alertPlaybackFinishWaitingStreams;	// 72 = 0x48
    NSHashTable *_streams;	// 80 = 0x50
    NSHashTable *_stopPendingStreams;	// 88 = 0x58
    NSMutableArray *_pendingStartCompletions;	// 96 = 0x60
    NSMutableArray *_alertPlaybackFinishWaitingCompletions;	// 104 = 0x68
    NSMutableArray *_pendingStopCompletions;	// 112 = 0x70
    NSMutableDictionary *_startPendingOnStoppingStreamToCompletionDict;	// 120 = 0x78
    id <CSAudioProviderDelegate> _providerDelegate;	// 128 = 0x80
    id <CSAudioSessionProvidingDelegate> _sessionDelegate;	// 136 = 0x88
    NSMutableArray *_streamHolders;	// 144 = 0x90
    NSHashTable *_historicalBufferRequestStreams;	// 152 = 0x98
    CSAudioCircularBuffer *_circularBuffer;	// 160 = 0xa0
    id <CSAudioAlertProvidingDelegate> _alertDelegate;	// 168 = 0xa8
    CSAudioRecordContext *_lastAudioRecorderContext;	// 176 = 0xb0
    CSAudioPreprocessor *_audioPreprocessor;	// 184 = 0xb8
    CSOSTransaction *_recordingTransaction;	// 192 = 0xc0
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;	// 200 = 0xc8
    unsigned long long _audioStreamHandleId;	// 208 = 0xd0
    NSUUID *_alertPlaybackFinishTimeoutToken;	// 216 = 0xd8
    NSUUID *_startRecordingWatchDogToken;	// 224 = 0xe0
    NSUUID *_stopRecordingWatchDogToken;	// 232 = 0xe8
    unsigned long long _circularBufferStartHostTime;	// 240 = 0xf0
    unsigned long long _circularBufferStartSampleCount;	// 248 = 0xf8
    unsigned long long _recordingSourceType;	// 256 = 0x100
}

- (void).cxx_destruct;	// IMP=0x000000010004a598
@property(nonatomic) unsigned long long recordingSourceType; // @synthesize recordingSourceType=_recordingSourceType;
@property(nonatomic) unsigned long long circularBufferStartSampleCount; // @synthesize circularBufferStartSampleCount=_circularBufferStartSampleCount;
@property(nonatomic) unsigned long long circularBufferStartHostTime; // @synthesize circularBufferStartHostTime=_circularBufferStartHostTime;
@property(retain, nonatomic) NSUUID *stopRecordingWatchDogToken; // @synthesize stopRecordingWatchDogToken=_stopRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *startRecordingWatchDogToken; // @synthesize startRecordingWatchDogToken=_startRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *alertPlaybackFinishTimeoutToken; // @synthesize alertPlaybackFinishTimeoutToken=_alertPlaybackFinishTimeoutToken;
@property(nonatomic) unsigned long long audioStreamHandleId; // @synthesize audioStreamHandleId=_audioStreamHandleId;
@property(nonatomic) _Bool waitingForAlertFinish; // @synthesize waitingForAlertFinish=_waitingForAlertFinish;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup; // @synthesize recordingWillStartGroup=_recordingWillStartGroup;
@property(retain, nonatomic) CSOSTransaction *recordingTransaction; // @synthesize recordingTransaction=_recordingTransaction;
@property(retain, nonatomic) CSAudioPreprocessor *audioPreprocessor; // @synthesize audioPreprocessor=_audioPreprocessor;
@property(nonatomic) _Bool audioSystemRecovering; // @synthesize audioSystemRecovering=_audioSystemRecovering;
@property(retain, nonatomic) CSAudioRecordContext *lastAudioRecorderContext; // @synthesize lastAudioRecorderContext=_lastAudioRecorderContext;
@property(nonatomic) __weak id <CSAudioAlertProvidingDelegate> alertDelegate; // @synthesize alertDelegate=_alertDelegate;
@property(retain, nonatomic) CSAudioCircularBuffer *circularBuffer; // @synthesize circularBuffer=_circularBuffer;
@property(retain, nonatomic) NSHashTable *historicalBufferRequestStreams; // @synthesize historicalBufferRequestStreams=_historicalBufferRequestStreams;
@property(retain, nonatomic) NSMutableArray *streamHolders; // @synthesize streamHolders=_streamHolders;
@property(nonatomic) __weak id <CSAudioSessionProvidingDelegate> sessionDelegate; // @synthesize sessionDelegate=_sessionDelegate;
@property(nonatomic) __weak id <CSAudioProviderDelegate> providerDelegate; // @synthesize providerDelegate=_providerDelegate;
@property(retain, nonatomic) NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict; // @synthesize startPendingOnStoppingStreamToCompletionDict=_startPendingOnStoppingStreamToCompletionDict;
@property(retain, nonatomic) NSMutableArray *pendingStopCompletions; // @synthesize pendingStopCompletions=_pendingStopCompletions;
@property(retain, nonatomic) NSMutableArray *alertPlaybackFinishWaitingCompletions; // @synthesize alertPlaybackFinishWaitingCompletions=_alertPlaybackFinishWaitingCompletions;
@property(retain, nonatomic) NSMutableArray *pendingStartCompletions; // @synthesize pendingStartCompletions=_pendingStartCompletions;
@property(retain, nonatomic) NSHashTable *stopPendingStreams; // @synthesize stopPendingStreams=_stopPendingStreams;
@property(retain, nonatomic) NSHashTable *streams; // @synthesize streams=_streams;
@property(retain, nonatomic) NSHashTable *alertPlaybackFinishWaitingStreams; // @synthesize alertPlaybackFinishWaitingStreams=_alertPlaybackFinishWaitingStreams;
@property(retain, nonatomic) NSHashTable *startPendingOnStoppingStreams; // @synthesize startPendingOnStoppingStreams=_startPendingOnStoppingStreams;
@property(retain, nonatomic) NSHashTable *startPendingStreams; // @synthesize startPendingStreams=_startPendingStreams;
@property(nonatomic) unsigned long long streamState; // @synthesize streamState=_streamState;
@property(retain, nonatomic) CSAudioRecorder *audioRecorder; // @synthesize audioRecorder=_audioRecorder;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *loggingQueue; // @synthesize loggingQueue=_loggingQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue; // @synthesize recordQueue=_recordQueue;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (_Bool)_shouldHandleStartPendingOnStopping:(unsigned long long)arg1 withStopReason:(long long)arg2;	// IMP=0x000000010004a0c4
- (void)_clearDidStopRecordingDelegateWatchDog;	// IMP=0x000000010004a000
- (void)_scheduleDidStopRecordingDelegateWatchDog:(id)arg1;	// IMP=0x0000000100049e54
- (void)_scheduleDidStopRecordingDelegateWatchDog;	// IMP=0x0000000100049c68
- (void)_clearDidStartRecordingDelegateWatchDog;	// IMP=0x0000000100049ba4
- (void)_schduleDidStartRecordingDelegateWatchDogWithToken:(id)arg1;	// IMP=0x00000001000499b8
- (void)_scheduleDidStartRecordingDelegateWatchDog;	// IMP=0x00000001000497cc
- (void)_holdRecordingExceptionIfNeeded:(_Bool)arg1;	// IMP=0x00000001000496a4
- (void)_releaseRecordingTransactionIfNeeded;	// IMP=0x0000000100049490
- (void)_holdRecordingTransactionIfNeeded;	// IMP=0x0000000100049420
- (id)_streamStateName:(unsigned long long)arg1;	// IMP=0x000000010004923c
- (void)_handleAudioSystemFailure;	// IMP=0x00000001000490b4
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;	// IMP=0x0000000100048f74
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;	// IMP=0x0000000100048e94
- (void)audioRecorderDisconnected:(id)arg1;	// IMP=0x0000000100048dc0
- (void)audioRecorder:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x0000000100048d14
- (void)audioRecorder:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x0000000100048c68
- (void)audioRecorderEndRecordInterruption:(id)arg1;	// IMP=0x0000000100048bc4
- (void)audioRecorderBeginRecordInterruption:(id)arg1 withContext:(id)arg2;	// IMP=0x0000000100048b18
- (void)audioRecorderBeginRecordInterruption:(id)arg1;	// IMP=0x0000000100048a74
- (void)audioRecorderBuiltInAudioStreamInvalidated:(id)arg1 error:(id)arg2;	// IMP=0x0000000100048844
- (void)notifyProviderContextChanged;	// IMP=0x0000000100048740
- (void)audioRecorderDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;	// IMP=0x0000000100048630
- (void)_didReceiveFinishStartAlertPlaybackAt:(unsigned long long)arg1;	// IMP=0x0000000100047b98
- (void)_scheduleAlertFinishTimeout:(double)arg1;	// IMP=0x0000000100047904
- (void)audioRecorderRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(long long)arg2;	// IMP=0x00000001000475d8
- (_Bool)isNarrowBand;	// IMP=0x00000001000474dc
- (_Bool)isRecording;	// IMP=0x00000001000473e0
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3;	// IMP=0x00000001000470a4
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5 arrivalTimestampToAudioRecorder:(unsigned long long)arg6 numberOfChannels:(int)arg7;	// IMP=0x0000000100046e50
- (void)_processAudioBuffer:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3 arrivalTimestampToAudioRecorder:(unsigned long long)arg4 numberOfChannels:(int)arg5;	// IMP=0x000000010004653c
- (void)_fetchHistoricalAudioAndForwardToStream:(id)arg1 remoteVAD:(id)arg2;	// IMP=0x0000000100046020
- (void)audioRecorderWillBeDestroyed:(id)arg1;	// IMP=0x0000000100045e70
- (void)audioRecorderStreamHandleIdInvalidated:(unsigned long long)arg1;	// IMP=0x0000000100045c44
- (void)audioRecorderDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(long long)arg3;	// IMP=0x0000000100045bc0
- (void)audioRecorderDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(_Bool)arg3 error:(id)arg4;	// IMP=0x0000000100045aa8
- (void)audioPreprocessor:(id)arg1 hasAvailableBuffer:(id)arg2 atTime:(unsigned long long)arg3 arrivalTimestampToAudioRecorder:(unsigned long long)arg4 numberOfChannels:(int)arg5;	// IMP=0x00000001000459e0
- (_Bool)_shouldStopRecording;	// IMP=0x000000010004570c
- (_Bool)_isVoiceTriggerInfoAvailableLocally:(id)arg1;	// IMP=0x0000000100045694
- (void)triggerInfoForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000100045400
- (float)averagePowerForChannel:(unsigned long long)arg1;	// IMP=0x00000001000453a4
- (float)peakPowerForChannel:(unsigned long long)arg1;	// IMP=0x0000000100045348
- (void)updateMeters;	// IMP=0x0000000100045308
- (void)setMeteringEnabled:(_Bool)arg1;	// IMP=0x00000001000452c0
- (id)audioMetric;	// IMP=0x000000010004526c
- (void)configureAlertBehavior:(id)arg1;	// IMP=0x0000000100045198
- (unsigned long long)alertStartTime;	// IMP=0x0000000100045024
- (_Bool)playRecordStartingAlertAndResetEndpointer;	// IMP=0x0000000100044d54
- (_Bool)_didPlayStartAlertSoundForSiri:(id)arg1 audioStream:(id)arg2;	// IMP=0x0000000100044d38
- (_Bool)playAlertSoundForType:(long long)arg1;	// IMP=0x0000000100044bb4
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;	// IMP=0x0000000100044a18
- (void)setAudioAlertDelegate:(id)arg1;	// IMP=0x0000000100044980
- (void)enableMiniDucking:(_Bool)arg1;	// IMP=0x00000001000448d8
- (void)setDuckOthersOption:(_Bool)arg1;	// IMP=0x0000000100044830
- (_Bool)duckOthersOption;	// IMP=0x000000010004474c
- (void)enableSmartRoutingConsideration:(_Bool)arg1;	// IMP=0x000000010004468c
- (_Bool)_deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x00000001000443d8
- (_Bool)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x00000001000441d0
- (_Bool)_activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000100043f68
- (_Bool)activateAudioSessionWithReason:(unsigned long long)arg1 dynamicAttribute:(unsigned long long)arg2 bundleID:(id)arg3 error:(id *)arg4;	// IMP=0x0000000100043d40
- (_Bool)prewarmAudioSessionWithError:(id *)arg1;	// IMP=0x0000000100043afc
- (void)setAudioSessionDelegate:(id)arg1;	// IMP=0x0000000100043a64
- (id)playbackRoute;	// IMP=0x0000000100043928
- (id)recordSettings;	// IMP=0x00000001000437d4
- (id)audioDeviceInfo;	// IMP=0x00000001000436a0
- (id)recordDeviceInfo;	// IMP=0x000000010004356c
- (id)recordRoute;	// IMP=0x0000000100043418
- (void)cancelAudioStreamHold:(id)arg1;	// IMP=0x000000010004302c
- (id)holdAudioStreamWithDescription:(id)arg1 timeout:(double)arg2;	// IMP=0x00000001000429a8
- (void)_saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x00000001000427e4
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x0000000100042734
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;	// IMP=0x0000000100042638
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 channelIdx:(unsigned long long)arg3;	// IMP=0x0000000100042608
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x00000001000425d8
- (id)audioChunkToEndFrom:(unsigned long long)arg1 channelIdx:(unsigned long long)arg2;	// IMP=0x0000000100042498
- (id)audioChunkToEndFrom:(unsigned long long)arg1;	// IMP=0x000000010004235c
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x0000000100042258
- (void)_stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000413b4
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000412b4
- (void)_handleDidStopAudioStreamWithReason:(long long)arg1;	// IMP=0x00000001000409c0
- (void)_postEpilogueAudioStream;	// IMP=0x0000000100040968
- (void)_preEpilogueAudioStream;	// IMP=0x0000000100040958
- (void)_handleDidStartAudioStreamWithResult:(_Bool)arg1 error:(id)arg2;	// IMP=0x0000000100040560
- (void)_resetCircularBufferStartTime;	// IMP=0x0000000100040524
- (void)_switchToListeningMode;	// IMP=0x0000000100040460
- (void)_switchToRecordingMode;	// IMP=0x000000010004039c
- (void)_startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003f1c4
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003ef00
- (_Bool)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003ebf8
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003e678
- (void)_tearDownCircularBufferIfNeeded;	// IMP=0x000000010003e538
- (void)_createCircularBufferIfNeeded;	// IMP=0x000000010003e3a0
- (void)_prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003e264
- (_Bool)_prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003dda8
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010003dbd8
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003d948
- (id)_audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x000000010003d6c8
- (_Bool)setCurrentContext:(id)arg1 error:(id *)arg2;	// IMP=0x000000010003d168
- (void)setAudioProviderDelegate:(id)arg1;	// IMP=0x000000010003d0d0
- (void)start;	// IMP=0x000000010003cd68
- (void)dealloc;	// IMP=0x000000010003cc94
- (id)initWithAudioStreamHandleId:(unsigned long long)arg1 audioRecorder:(id)arg2 withCSRecordSourceType:(unsigned long long)arg3;	// IMP=0x000000010003c948

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

