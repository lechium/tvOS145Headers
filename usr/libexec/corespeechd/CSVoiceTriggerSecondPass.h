//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "CSAudioServerCrashMonitorDelegate-Protocol.h"
#import "CSAudioStreamProvidingDelegate-Protocol.h"
#import "CSKeywordAnalyzerNDEAPIScoreDelegate-Protocol.h"
#import "CSMediaPlayingMonitorDelegate-Protocol.h"
#import "CSSelfTriggerDetectorDelegate-Protocol.h"
#import "CSVoiceTriggerEnabledMonitorDelegate-Protocol.h"
#import "CSVolumeMonitorDelegate-Protocol.h"
#import "SSRSpeakerRecognitionControllerDelegate-Protocol.h"

@class CSAsset, CSAudioCircularBuffer, CSAudioStream, CSKeywordAnalyzerNDAPI, CSKeywordAnalyzerNDEAPI, CSPlainAudioFileWriter, CSShadowMicScoreCreator, CSSpeechManager, CSSyncKeywordAnalyzerQuasar, CSVTSecondPassScorer, NSDictionary, NSMutableArray, NSMutableData, NSString, NSUUID, SSRSpeakerRecognitionContext, SSRSpeakerRecognitionController;
@protocol CSVoiceTriggerDelegate, OS_dispatch_queue;

@interface CSVoiceTriggerSecondPass : NSObject <CSKeywordAnalyzerNDEAPIScoreDelegate, CSVoiceTriggerEnabledMonitorDelegate, CSAudioServerCrashMonitorDelegate, CSAudioStreamProvidingDelegate, CSMediaPlayingMonitorDelegate, CSVolumeMonitorDelegate, SSRSpeakerRecognitionControllerDelegate, CSSelfTriggerDetectorDelegate>
{
    _Bool _hasReceivedNDEAPIResult;	// 8 = 0x8
    _Bool _isSecondChanceHot;	// 9 = 0x9
    _Bool _shouldUsePHS;	// 10 = 0xa
    _Bool _hasPendingNearMiss;	// 11 = 0xb
    _Bool _didWakeAP;	// 12 = 0xc
    _Bool _hasTriggerCandidate;	// 13 = 0xd
    _Bool _isStartSampleCountMarked;	// 14 = 0xe
    _Bool _secondPassHasMadeDecision;	// 15 = 0xf
    unsigned char _hasReceivedEarlyDetectNDEAPIResult;	// 16 = 0x10
    _Bool _firstTimeAssetConfigured;	// 17 = 0x11
    float _secondPassCompleteWatchDogTimeoutSec;	// 20 = 0x14
    float _referenceKeywordThreshold;	// 24 = 0x18
    float _keywordThreshold;	// 28 = 0x1c
    float _keywordThresholdSecondChance;	// 32 = 0x20
    float _effectiveKeywordThreshold;	// 36 = 0x24
    float _keywordLoggingThreshold;	// 40 = 0x28
    float _lastScore;	// 44 = 0x2c
    float _keywordRejectLoggingThreshold;	// 48 = 0x30
    float _phsRejectLoggingThreshold;	// 52 = 0x34
    float _phsThreshold;	// 56 = 0x38
    float _recognizerScore;	// 60 = 0x3c
    float _recognizerScoreScaleFactor;	// 64 = 0x40
    float _recognizerThresholdOffset;	// 68 = 0x44
    float _firstPassChannelSelectionDelaySeconds;	// 72 = 0x48
    float _firstPassMasterChannelScoreBoost;	// 76 = 0x4c
    float _firstPassOnsetScore;	// 80 = 0x50
    float _twoShotFeedbackDelay;	// 84 = 0x54
    float _mediaVolume;	// 88 = 0x58
    float _shadowMicScoreThresholdForVAD;	// 92 = 0x5c
    NSString *_UUID;	// 96 = 0x60
    id <CSVoiceTriggerDelegate> _delegate;	// 104 = 0x68
    unsigned long long _secondChanceHotTillMachTime;	// 112 = 0x70
    CSSpeechManager *_speechManager;	// 120 = 0x78
    NSObject<OS_dispatch_queue> *_queue;	// 128 = 0x80
    CSAsset *_currentAsset;	// 136 = 0x88
    CSAudioStream *_audioStream;	// 144 = 0x90
    NSString *_audioProviderUUID;	// 152 = 0x98
    CSKeywordAnalyzerNDAPI *_syncKeywordAnalyzerNDAPI;	// 160 = 0xa0
    CSKeywordAnalyzerNDEAPI *_keywordAnalyzerNDEAPI;	// 168 = 0xa8
    CSSyncKeywordAnalyzerQuasar *_syncKeywordAnalyzerQuasar;	// 176 = 0xb0
    SSRSpeakerRecognitionController *_speakerRecognitionController;	// 184 = 0xb8
    SSRSpeakerRecognitionContext *_ssrContext;	// 192 = 0xc0
    CDUnknownBlockType _resultCompletion;	// 200 = 0xc8
    unsigned long long _secondPassTimeout;	// 208 = 0xd0
    unsigned long long _numProcessedSamples;	// 216 = 0xd8
    unsigned long long _numAnalyzedSamples;	// 224 = 0xe0
    unsigned long long _extraSamplesAtStart;	// 232 = 0xe8
    unsigned long long _analyzerPrependingSamples;	// 240 = 0xf0
    unsigned long long _analyzerTrailingSamples;	// 248 = 0xf8
    unsigned long long _nearMissDelayTimeout;	// 256 = 0x100
    unsigned long long _nearMissCandidateDetectedSamples;	// 264 = 0x108
    unsigned long long _earlyDetectFiredMachTime;	// 272 = 0x110
    unsigned long long _activeChannel;	// 280 = 0x118
    unsigned long long _selectedChannelFromFirstPass;	// 288 = 0x120
    unsigned long long _processedSampleCountsInPending;	// 296 = 0x128
    unsigned long long _firstPassTriggerStartSampleCount;	// 304 = 0x130
    unsigned long long _firstPassTriggerFireSampleCount;	// 312 = 0x138
    NSDictionary *_firstPassChannelSelectionScores;	// 320 = 0x140
    unsigned long long _firstPassOnsetChannel;	// 328 = 0x148
    unsigned long long _secondPassAnalyzerStartSampleCount;	// 336 = 0x150
    unsigned long long _secondPassTriggerMachAbsTime;	// 344 = 0x158
    NSObject<OS_dispatch_queue> *_stateSerialQueue;	// 352 = 0x160
    double _lastAggTime;	// 360 = 0x168
    double _cumulativeUptime;	// 368 = 0x170
    double _cumulativeDowntime;	// 376 = 0x178
    CSAudioCircularBuffer *_audioBuffer;	// 384 = 0x180
    unsigned long long _firstPassSource;	// 392 = 0x188
    NSString *_firstPassDeviceID;	// 400 = 0x190
    CSPlainAudioFileWriter *_audioFileWriter;	// 408 = 0x198
    long long _mediaPlayingState;	// 416 = 0x1a0
    CSShadowMicScoreCreator *_shadowMicScoreCreator;	// 424 = 0x1a8
    NSMutableData *_dataBufferNDEAPI;	// 432 = 0x1b0
    unsigned long long _dataBufferPositionNDEAPI;	// 440 = 0x1b8
    CSVTSecondPassScorer *_secondPassScorer;	// 448 = 0x1c0
    NSUUID *_secondPassCompleteWatchDogToken;	// 456 = 0x1c8
    NSMutableArray *_assetConfigWaitingBuffer;	// 464 = 0x1d0
}

+ (id)stringForSecondPassResult:(unsigned long long)arg1;	// IMP=0x00000001000ba318
+ (id)timeStampString;	// IMP=0x00000001000ba238
+ (id)secondPassAudioLogDirectory;	// IMP=0x00000001000ba104
+ (id)secondPassAudioLoggingFilePath;	// IMP=0x00000001000ba02c
- (void).cxx_destruct;	// IMP=0x00000001000bb520
@property(retain, nonatomic) NSMutableArray *assetConfigWaitingBuffer; // @synthesize assetConfigWaitingBuffer=_assetConfigWaitingBuffer;
@property(nonatomic) _Bool firstTimeAssetConfigured; // @synthesize firstTimeAssetConfigured=_firstTimeAssetConfigured;
@property(retain, nonatomic) NSUUID *secondPassCompleteWatchDogToken; // @synthesize secondPassCompleteWatchDogToken=_secondPassCompleteWatchDogToken;
@property(retain, nonatomic) CSVTSecondPassScorer *secondPassScorer; // @synthesize secondPassScorer=_secondPassScorer;
@property(nonatomic) float shadowMicScoreThresholdForVAD; // @synthesize shadowMicScoreThresholdForVAD=_shadowMicScoreThresholdForVAD;
@property(nonatomic) unsigned char hasReceivedEarlyDetectNDEAPIResult; // @synthesize hasReceivedEarlyDetectNDEAPIResult=_hasReceivedEarlyDetectNDEAPIResult;
@property(nonatomic) unsigned long long dataBufferPositionNDEAPI; // @synthesize dataBufferPositionNDEAPI=_dataBufferPositionNDEAPI;
@property(retain, nonatomic) NSMutableData *dataBufferNDEAPI; // @synthesize dataBufferNDEAPI=_dataBufferNDEAPI;
@property(retain, nonatomic) CSShadowMicScoreCreator *shadowMicScoreCreator; // @synthesize shadowMicScoreCreator=_shadowMicScoreCreator;
@property(nonatomic) float mediaVolume; // @synthesize mediaVolume=_mediaVolume;
@property(nonatomic) long long mediaPlayingState; // @synthesize mediaPlayingState=_mediaPlayingState;
@property(nonatomic) _Bool secondPassHasMadeDecision; // @synthesize secondPassHasMadeDecision=_secondPassHasMadeDecision;
@property(retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter; // @synthesize audioFileWriter=_audioFileWriter;
@property(nonatomic) float twoShotFeedbackDelay; // @synthesize twoShotFeedbackDelay=_twoShotFeedbackDelay;
@property(retain, nonatomic) NSString *firstPassDeviceID; // @synthesize firstPassDeviceID=_firstPassDeviceID;
@property(nonatomic) unsigned long long firstPassSource; // @synthesize firstPassSource=_firstPassSource;
@property(nonatomic) __weak CSAudioCircularBuffer *audioBuffer; // @synthesize audioBuffer=_audioBuffer;
@property(nonatomic) double cumulativeDowntime; // @synthesize cumulativeDowntime=_cumulativeDowntime;
@property(nonatomic) double cumulativeUptime; // @synthesize cumulativeUptime=_cumulativeUptime;
@property(nonatomic) double lastAggTime; // @synthesize lastAggTime=_lastAggTime;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *stateSerialQueue; // @synthesize stateSerialQueue=_stateSerialQueue;
@property(nonatomic) unsigned long long secondPassTriggerMachAbsTime; // @synthesize secondPassTriggerMachAbsTime=_secondPassTriggerMachAbsTime;
@property(nonatomic) unsigned long long secondPassAnalyzerStartSampleCount; // @synthesize secondPassAnalyzerStartSampleCount=_secondPassAnalyzerStartSampleCount;
@property(nonatomic) _Bool isStartSampleCountMarked; // @synthesize isStartSampleCountMarked=_isStartSampleCountMarked;
@property(nonatomic) _Bool hasTriggerCandidate; // @synthesize hasTriggerCandidate=_hasTriggerCandidate;
@property(nonatomic) _Bool didWakeAP; // @synthesize didWakeAP=_didWakeAP;
@property(nonatomic) unsigned long long firstPassOnsetChannel; // @synthesize firstPassOnsetChannel=_firstPassOnsetChannel;
@property(nonatomic) float firstPassOnsetScore; // @synthesize firstPassOnsetScore=_firstPassOnsetScore;
@property(nonatomic) float firstPassMasterChannelScoreBoost; // @synthesize firstPassMasterChannelScoreBoost=_firstPassMasterChannelScoreBoost;
@property(nonatomic) float firstPassChannelSelectionDelaySeconds; // @synthesize firstPassChannelSelectionDelaySeconds=_firstPassChannelSelectionDelaySeconds;
@property(retain, nonatomic) NSDictionary *firstPassChannelSelectionScores; // @synthesize firstPassChannelSelectionScores=_firstPassChannelSelectionScores;
@property(nonatomic) unsigned long long firstPassTriggerFireSampleCount; // @synthesize firstPassTriggerFireSampleCount=_firstPassTriggerFireSampleCount;
@property(nonatomic) unsigned long long firstPassTriggerStartSampleCount; // @synthesize firstPassTriggerStartSampleCount=_firstPassTriggerStartSampleCount;
@property(nonatomic) unsigned long long processedSampleCountsInPending; // @synthesize processedSampleCountsInPending=_processedSampleCountsInPending;
@property(nonatomic) unsigned long long selectedChannelFromFirstPass; // @synthesize selectedChannelFromFirstPass=_selectedChannelFromFirstPass;
@property(nonatomic) unsigned long long activeChannel; // @synthesize activeChannel=_activeChannel;
@property(nonatomic) unsigned long long earlyDetectFiredMachTime; // @synthesize earlyDetectFiredMachTime=_earlyDetectFiredMachTime;
@property(nonatomic) float recognizerThresholdOffset; // @synthesize recognizerThresholdOffset=_recognizerThresholdOffset;
@property(nonatomic) float recognizerScoreScaleFactor; // @synthesize recognizerScoreScaleFactor=_recognizerScoreScaleFactor;
@property(nonatomic) float recognizerScore; // @synthesize recognizerScore=_recognizerScore;
@property(nonatomic) _Bool hasPendingNearMiss; // @synthesize hasPendingNearMiss=_hasPendingNearMiss;
@property(nonatomic) unsigned long long nearMissCandidateDetectedSamples; // @synthesize nearMissCandidateDetectedSamples=_nearMissCandidateDetectedSamples;
@property(nonatomic) unsigned long long nearMissDelayTimeout; // @synthesize nearMissDelayTimeout=_nearMissDelayTimeout;
@property(nonatomic) _Bool shouldUsePHS; // @synthesize shouldUsePHS=_shouldUsePHS;
@property(nonatomic) unsigned long long analyzerTrailingSamples; // @synthesize analyzerTrailingSamples=_analyzerTrailingSamples;
@property(nonatomic) unsigned long long analyzerPrependingSamples; // @synthesize analyzerPrependingSamples=_analyzerPrependingSamples;
@property(nonatomic) unsigned long long extraSamplesAtStart; // @synthesize extraSamplesAtStart=_extraSamplesAtStart;
@property(nonatomic) float phsThreshold; // @synthesize phsThreshold=_phsThreshold;
@property(nonatomic) float phsRejectLoggingThreshold; // @synthesize phsRejectLoggingThreshold=_phsRejectLoggingThreshold;
@property(nonatomic) float keywordRejectLoggingThreshold; // @synthesize keywordRejectLoggingThreshold=_keywordRejectLoggingThreshold;
@property(nonatomic) _Bool isSecondChanceHot; // @synthesize isSecondChanceHot=_isSecondChanceHot;
@property(nonatomic) float lastScore; // @synthesize lastScore=_lastScore;
@property(nonatomic) float keywordLoggingThreshold; // @synthesize keywordLoggingThreshold=_keywordLoggingThreshold;
@property(nonatomic) float effectiveKeywordThreshold; // @synthesize effectiveKeywordThreshold=_effectiveKeywordThreshold;
@property(nonatomic) float keywordThresholdSecondChance; // @synthesize keywordThresholdSecondChance=_keywordThresholdSecondChance;
@property(nonatomic) float keywordThreshold; // @synthesize keywordThreshold=_keywordThreshold;
@property(nonatomic) float referenceKeywordThreshold; // @synthesize referenceKeywordThreshold=_referenceKeywordThreshold;
@property(nonatomic) unsigned long long numAnalyzedSamples; // @synthesize numAnalyzedSamples=_numAnalyzedSamples;
@property(nonatomic) unsigned long long numProcessedSamples; // @synthesize numProcessedSamples=_numProcessedSamples;
@property(nonatomic) unsigned long long secondPassTimeout; // @synthesize secondPassTimeout=_secondPassTimeout;
@property(nonatomic) _Bool hasReceivedNDEAPIResult; // @synthesize hasReceivedNDEAPIResult=_hasReceivedNDEAPIResult;
@property(copy, nonatomic) CDUnknownBlockType resultCompletion; // @synthesize resultCompletion=_resultCompletion;
@property(retain, nonatomic) SSRSpeakerRecognitionContext *ssrContext; // @synthesize ssrContext=_ssrContext;
@property(retain, nonatomic) SSRSpeakerRecognitionController *speakerRecognitionController; // @synthesize speakerRecognitionController=_speakerRecognitionController;
@property(retain, nonatomic) CSSyncKeywordAnalyzerQuasar *syncKeywordAnalyzerQuasar; // @synthesize syncKeywordAnalyzerQuasar=_syncKeywordAnalyzerQuasar;
@property(retain, nonatomic) CSKeywordAnalyzerNDEAPI *keywordAnalyzerNDEAPI; // @synthesize keywordAnalyzerNDEAPI=_keywordAnalyzerNDEAPI;
@property(retain, nonatomic) CSKeywordAnalyzerNDAPI *syncKeywordAnalyzerNDAPI; // @synthesize syncKeywordAnalyzerNDAPI=_syncKeywordAnalyzerNDAPI;
@property(retain, nonatomic) NSString *audioProviderUUID; // @synthesize audioProviderUUID=_audioProviderUUID;
@property(retain, nonatomic) CSAudioStream *audioStream; // @synthesize audioStream=_audioStream;
@property(retain, nonatomic) CSAsset *currentAsset; // @synthesize currentAsset=_currentAsset;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain, nonatomic) CSSpeechManager *speechManager; // @synthesize speechManager=_speechManager;
@property(nonatomic) float secondPassCompleteWatchDogTimeoutSec; // @synthesize secondPassCompleteWatchDogTimeoutSec=_secondPassCompleteWatchDogTimeoutSec;
@property(nonatomic) unsigned long long secondChanceHotTillMachTime; // @synthesize secondChanceHotTillMachTime=_secondChanceHotTillMachTime;
@property(nonatomic) __weak id <CSVoiceTriggerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (void)_clearSecondPassCompletionWatchDog;	// IMP=0x00000001000baf48
- (void)_scheduleDidStartSecondPassCompletionWatchDogWithToken:(id)arg1;	// IMP=0x00000001000bad84
- (void)_scheduleSecondPassCompletionWatchDog;	// IMP=0x00000001000bab90
- (void)_handleResultCompletion:(unsigned long long)arg1 voiceTriggerInfo:(id)arg2 error:(id)arg3;	// IMP=0x00000001000baacc
- (void)_setStartAnalyzeTime:(unsigned long long)arg1;	// IMP=0x00000001000ba9b0
- (void)_resetStartAnalyzeTime;	// IMP=0x00000001000ba9a4
- (_Bool)_shouldLogMediaplayState:(unsigned long long)arg1;	// IMP=0x00000001000ba930
- (_Bool)_shouldRequestSingleChannelFromAudioProvider;	// IMP=0x00000001000ba92c
- (void)_logSecondPassResult:(unsigned long long)arg1 withVTEI:(id)arg2;	// IMP=0x00000001000ba3c4
- (void)CSVolumeMonitor:(id)arg1 didReceiveMusicVolumeChanged:(float)arg2;	// IMP=0x00000001000b9fc0
- (void)CSMediaPlayingMonitor:(id)arg1 didReceiveMediaPlayingChanged:(long long)arg2;	// IMP=0x00000001000b9f5c
- (void)selfTriggerDetector:(id)arg1 didDetectSelfTrigger:(id)arg2;	// IMP=0x00000001000b9ef4
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;	// IMP=0x00000001000b9d8c
- (void)_handlePHSResults:(id)arg1 voiceTriggerEventInfo:(id)arg2;	// IMP=0x00000001000b93ac
- (void)_addPHSInfoToVTEI:(id)arg1 fromSpeakerInfo:(id)arg2;	// IMP=0x00000001000b89f0
- (void)_getDidWakeAP:(id)arg1;	// IMP=0x00000001000b8974
- (void)_addDeviceStatusInfoToDict:(id)arg1;	// IMP=0x00000001000b8784
- (void)_addRejectStatsToDict:(id)arg1;	// IMP=0x00000001000b8610
- (void)_handleVoiceTriggerFirstPassFromAOP:(id)arg1 audioProviderUUID:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b7e70
- (void)CSVoiceTriggerEnabledMonitor:(id)arg1 didReceiveEnabled:(_Bool)arg2;	// IMP=0x00000001000b7db8
- (void)_resetUpTime;	// IMP=0x00000001000b7cbc
- (void)_logUptimeWithVTSwitchChanged:(_Bool)arg1 VTEnabled:(_Bool)arg2;	// IMP=0x00000001000b7aac
- (_Bool)_supportTwoShotFeedbackDelay;	// IMP=0x00000001000b79b8
- (void)_handleSecondPassSuccess:(id)arg1;	// IMP=0x00000001000b74bc
- (void)_markSecondPassTriggerMachAbsoluteTime:(unsigned long long)arg1;	// IMP=0x00000001000b7350
- (void)keywordAnalyzerNDEAPI:(id)arg1 hasResultAvailable:(id)arg2 forChannel:(unsigned long long)arg3;	// IMP=0x00000001000b6f78
- (void)_analyzeForKeywordDetection:(id)arg1 forChannel:(unsigned long long)arg2 forceMaximized:(_Bool)arg3;	// IMP=0x00000001000b66e8
- (void)_mpAnalyzeForTriggerDetection:(id)arg1 forceMaximized:(_Bool)arg2;	// IMP=0x00000001000b5fc0
- (id)_getVoiceTriggerInfoWithLastResult:(id)arg1 withNumAnalyzedSamples:(unsigned long long)arg2 withKeywordScore:(float)arg3;	// IMP=0x00000001000b4db4
- (id)_mpvtGetVoiceTriggerInfoWithLastResult:(id)arg1;	// IMP=0x00000001000b4aa0
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;	// IMP=0x00000001000b4a9c
- (void)_runRecognizersWithChunk:(id)arg1;	// IMP=0x00000001000b4780
- (void)_handleAudioChunk:(id)arg1;	// IMP=0x00000001000b4270
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;	// IMP=0x00000001000b3ff4
- (void)_computeEffectiveThreshold;	// IMP=0x00000001000b3e48
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectly:(long long)arg2;	// IMP=0x00000001000b3d04
- (void)_didStopAudioStream;	// IMP=0x00000001000b3b64
- (void)_didStartAudioStream:(_Bool)arg1;	// IMP=0x00000001000b39bc
- (void)_prepareStartAudioStream;	// IMP=0x00000001000b37f4
- (void)_notifySecondPassReject:(id)arg1 result:(unsigned long long)arg2;	// IMP=0x00000001000b346c
- (void)_voiceTriggerFirstPassDidDetectKeywordFrom:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000b2938
- (void)cancelCurrentRequest;	// IMP=0x00000001000b26ac
- (void)handleVoiceTriggerSecondPassFrom:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000b26a0
- (void)_handleVoiceTriggerFirstPassFromJarvis:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000b2038
- (void)_handleVoiceTriggerFirstPassFromHearstAP:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000b1a94
- (void)_handleVoiceTriggerFirstPassFromHearst:(unsigned long long)arg1 deviceId:(id)arg2 audioProviderUUID:(id)arg3 firstPassInfo:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001000b1564
- (void)_handleVoiceTriggerFirstPassFromAP:(id)arg1 audioProviderUUID:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b0e9c
- (void)_requestStartAudioStreamWitContext:(id)arg1 audioProviderUUID:(id)arg2 startStreamOption:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000001000b06dc
- (void)_clearTriggerCandidate;	// IMP=0x00000001000b05e0
- (void)_initializeMediaPlayingState;	// IMP=0x00000001000b03dc
- (void)_setAsset:(id)arg1;	// IMP=0x00000001000af608
- (void)setAsset:(id)arg1;	// IMP=0x00000001000af570
- (void)_reset;	// IMP=0x00000001000af3fc
- (void)reset;	// IMP=0x00000001000af394
- (void)start;	// IMP=0x00000001000af2e0
- (void)dealloc;	// IMP=0x00000001000af140
- (id)initWithPHSEnabled:(_Bool)arg1;	// IMP=0x00000001000af130
- (id)initWithPHSEnabled:(_Bool)arg1 speechManager:(id)arg2;	// IMP=0x00000001000aee28

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

