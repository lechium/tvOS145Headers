//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSSecureCoding-Protocol.h"

@class CKRecord, GKCloudPlayer, NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSString, NSURL;

@interface GKCloudGameSession : NSObject <NSSecureCoding>
{
    CKRecord *_record;	// 8 = 0x8
    NSDictionary *_playersByIdentifier;	// 16 = 0x10
    GKCloudPlayer *_owner;	// 24 = 0x18
    NSURL *_url;	// 32 = 0x20
}

+ (void)badgeCountForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100157580
+ (void)updateBadgeCountsForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2;	// IMP=0x00000001001571d0
+ (void)updateBadgeCountsForContainerName:(id)arg1;	// IMP=0x00000001001571c0
+ (void)deleteInviteRecordWithRecordID:(id)arg1 fromDatabase:(id)arg2;	// IMP=0x0000000100156e2c
+ (void)searchAndSaveIdentityForRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100156e28
+ (void)saveInviteRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100156494
+ (void)getAssociatedAccountsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100156490
+ (id)msgServiceQueue;	// IMP=0x0000000100156420
+ (void)generateAndStoreInviteBulletinForRecord:(id)arg1 database:(id)arg2;	// IMP=0x0000000100155848
+ (id)packFakeTurnBasedBulletinWithZoneData:(id)arg1;	// IMP=0x0000000100155370
+ (id)packFakeRealTimeBulletinWithZoneData:(id)arg1;	// IMP=0x000000010015482c
+ (void)reportPlayerStateChangesToClients:(id)arg1 forUpdatedSession:(id)arg2 oldSession:(id)arg3;	// IMP=0x00000001001535d0
+ (void)openStoreForBundleID:(id)arg1;	// IMP=0x0000000100151ffc
+ (void)launchOrOpenAppStoreForBundleID:(id)arg1;	// IMP=0x0000000100151fa4
+ (void)acceptShareMetadata:(id)arg1 retryCount:(int)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100151714
+ (void)showAcceptAlertWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100151554
+ (void)handleLegacyShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100150a50
+ (void)handleSessionShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001001501f4
+ (void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014fa10
+ (void)acceptShareURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014f680
+ (void)saveInformationForPrimaryUserForSessionWithShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014ed88
+ (void)fetchShareMetadataForURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014e8e8
+ (void)fetchShareRecordsWithRecordIDs:(id)arg1 inDatabase:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010014e7c4
+ (id)cloudKitOperationConfigurationForSocialGamingSessionsContainer;	// IMP=0x000000010014d610
+ (id)cloudKitOperationConfigurationForContainer:(id)arg1;	// IMP=0x000000010014d580
+ (void)subscribeToAllDBwithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010014d060
+ (void)getZoneNamesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010014ca70
+ (void)createZoneWithName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014c85c
+ (void)bundleIDsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014b658
+ (void)removeSessionWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014adfc
+ (void)createSessionWithContainerName:(id)arg1 title:(id)arg2 maxConnectedPlayers:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x000000010014a1cc
+ (_Bool)isCloudDriveEnabledForBundleID:(id)arg1;	// IMP=0x0000000100149f30
+ (id)databaseForZoneID:(id)arg1;	// IMP=0x0000000100149ee0
+ (id)databaseForSession:(id)arg1;	// IMP=0x0000000100149e8c
+ (id)sharedDatabase;	// IMP=0x0000000100149e28
+ (id)privateDatabase;	// IMP=0x0000000100149dc4
+ (_Bool)isOwnZoneID:(id)arg1;	// IMP=0x0000000100149c94
+ (_Bool)isOwnRecordID:(id)arg1;	// IMP=0x0000000100149c38
+ (id)recordIDForSessionIdentifier:(id)arg1;	// IMP=0x00000001001499f4
+ (id)sessionIdentifierForRecordID:(id)arg1;	// IMP=0x00000001001497f4
+ (id)allowedCharacterSet;	// IMP=0x0000000100149720
+ (void)getFriendPlayersWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100149100
+ (void)updateFriendRecordIfNeeded;	// IMP=0x0000000100148978
+ (void)updateFriendsWithRecord:(id)arg1;	// IMP=0x0000000100148488
+ (void)updateCacheForFriendZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100147f2c
+ (void)updatePlayersForSessions:(id)arg1 sharesByRecordID:(id)arg2 inDatabase:(id)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x0000000100146f78
+ (void)primaryPlayerWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100146eac
+ (id)playerIdentifierForUserRecordName:(id)arg1;	// IMP=0x0000000100146de8
+ (id)localPlayerAlias;	// IMP=0x0000000100146b60
+ (void)determinePlayerChangesIn:(id)arg1 newSession:(id)arg2 notifyClients:(id)arg3;	// IMP=0x0000000100146544
+ (void)reportChangesForSessions:(id)arg1 shareChangedSessions:(id)arg2 removedSessions:(id)arg3 zoneID:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x00000001001458b8
+ (id)allChangedSessionsFromRecordChangedSessions:(id)arg1 shareChangedSessions:(id)arg2;	// IMP=0x0000000100145520
+ (void)updateCacheForDatabase:(id)arg1 zoneIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100143d3c
+ (void)updateCacheForDatabaseScope:(long long)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100142890
+ (void)updateCacheForZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001424a8
+ (void)updateSessionCacheDatabasesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001001420ec
+ (void)updateSessionCacheWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100141c6c
+ (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100141c00
+ (void)fetchUserRecordIDWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100141b88
+ (id)friendEmailsByID;	// IMP=0x0000000100141b34
+ (void)sessionForShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100141a94
+ (void)sessionsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001416cc
+ (void)sessionForIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100141310
+ (id)cacheQueue;	// IMP=0x00000001001412a0
+ (id)sessionCache;	// IMP=0x0000000100141234
+ (id)AES128Operation:(unsigned int)arg1 key:(id)arg2 data:(id)arg3;	// IMP=0x00000001001410e0
+ (id)AES128DecryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x00000001001410cc
+ (id)AES128EncryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x00000001001410b8
+ (id)playerIdentifierForObfuscatedIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x0000000100140fbc
+ (id)obfuscatedIdentifierForPlayerIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x0000000100140ec4
+ (id)mutablePlistFromPlayerStatesData:(id)arg1 error:(id *)arg2;	// IMP=0x0000000100140188
+ (_Bool)supportsSecureCoding;	// IMP=0x000000010013f598
- (void).cxx_destruct;	// IMP=0x0000000100158614
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) GKCloudPlayer *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) NSDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
@property(retain, nonatomic) CKRecord *record; // @synthesize record=_record;
- (void)setBadged:(_Bool)arg1 forPlayerIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100157d44
- (void)saveConnectionState:(long long)arg1 forPlayerWithID:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100153f7c
- (void)tempEmailFixForPlayerID:(id)arg1;	// IMP=0x0000000100153de8
@property(readonly, nonatomic) NSArray *connectedPlayerIDs;
- (void)removePlayers:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100152ab4
- (void)deleteShareWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001001526f0
- (void)fetchShareRecordWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014e5b0
- (void)saveShare:(id)arg1 isNewShare:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010014e188
- (void)setupShareWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010014def4
- (void)getShareURLWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010014d6fc
- (void)saveWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010014c53c
- (void)saveData:(id)arg1 changeTag:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010014bc80
@property(readonly, nonatomic) NSString *containerName;
- (id)playersForGKGameSession;	// IMP=0x0000000100147c04
- (id)players;	// IMP=0x0000000100147bb0
- (void)setPlayers:(id)arg1;	// IMP=0x00000001001479fc
- (void)updatePlayersWithIdentities:(id)arg1;	// IMP=0x0000000100147760
- (id)createGKGameSession;	// IMP=0x0000000100140854
@property(retain, nonatomic) NSMutableDictionary *nicknamesByIdentifier; // @dynamic nicknamesByIdentifier;
@property(retain, nonatomic) NSMutableDictionary *emailsByCKID;
@property(readonly, nonatomic) NSDictionary *playersByEmail;
- (id)playerStates;	// IMP=0x00000001001401dc
- (void)setPlayerStates:(id)arg1;	// IMP=0x0000000100140114
@property(readonly, nonatomic) NSString *serverChangeTag;
@property(readonly, nonatomic) GKCloudPlayer *lastModifiedPlayer;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
@property(retain, nonatomic) NSData *data;
@property(nonatomic) long long maxConnectedPlayers;
@property(retain, nonatomic) NSString *title;
@property(readonly, nonatomic) NSString *identifier;
- (_Bool)isOwnedByUser;	// IMP=0x000000010013faa4
- (id)description;	// IMP=0x000000010013f95c
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000010013f868
- (id)initWithCoder:(id)arg1;	// IMP=0x000000010013f5a0
- (id)initWithRecord:(id)arg1;	// IMP=0x000000010013f524
- (id)initWithContainerName:(id)arg1;	// IMP=0x000000010013f468

@end

