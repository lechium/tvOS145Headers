//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "IDSDAccountRegistrationListener-Protocol.h"

@class IDSRealTimeEncryptionIdentity, NSMutableDictionary, NSString, NSTimer;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface IDSRealTimeEncryptionController : NSObject <IDSDAccountRegistrationListener>
{
    NSObject<OS_dispatch_queue> *_realtimeEncryptionQueue;	// 8 = 0x8
    _Bool _isInternal;	// 16 = 0x10
    struct os_unfair_lock_s _lock;	// 20 = 0x14
    _Bool _shouldBroadcastAllValidMkMs;	// 24 = 0x18
    double _mkmAcknowledgementTimeout;	// 32 = 0x20
    double _preKeyRequestDelayDuration;	// 40 = 0x28
    unsigned int _prekeyExpireDuration;	// 48 = 0x30
    unsigned int _previousPrekeyExpireDuration;	// 52 = 0x34
    unsigned int _mkmExpireDuration;	// 56 = 0x38
    unsigned int _mkmRollDuration;	// 60 = 0x3c
    unsigned char _MKMRecoveryRetryCount;	// 64 = 0x40
    _Bool _isMKMRecoveryRunning;	// 65 = 0x41
    _Bool _isDeferredPrekeyRequestPending;	// 66 = 0x42
    CDUnknownBlockType _initialKeyMaterialDistributionTimeoutBlock;	// 72 = 0x48
    NSObject<OS_dispatch_source> *_mkmRollTimer;	// 80 = 0x50
    NSObject<OS_dispatch_source> *_mkmExpirationTimer;	// 88 = 0x58
    CDUnknownBlockType _mkmRollBlock;	// 96 = 0x60
    CDUnknownBlockType _mkmExpirationBlock;	// 104 = 0x68
    NSMutableDictionary *_accountIDs;	// 112 = 0x70
    NSMutableDictionary *_fromIDs;	// 120 = 0x78
    IDSRealTimeEncryptionIdentity *_identityForDevice;	// 128 = 0x80
    IDSRealTimeEncryptionIdentity *_previousIdentityForDevice;	// 136 = 0x88
    NSMutableDictionary *_prekeyAckCountForGroup;	// 144 = 0x90
    NSMutableDictionary *_publicKeyForDevice;	// 152 = 0x98
    NSMutableDictionary *_groupIDToKeyMaterialCache;	// 160 = 0xa0
    NSMutableDictionary *_membersForGroup;	// 168 = 0xa8
    NSMutableDictionary *_participantsForGroup;	// 176 = 0xb0
    NSMutableDictionary *_participantsInfoForGroup;	// 184 = 0xb8
    NSMutableDictionary *_participantsWaitingForKeyMaterials;	// 192 = 0xc0
    NSMutableDictionary *_participantsWaitingForInitialKeyMaterials;	// 200 = 0xc8
    NSMutableDictionary *_endpointSubscriptionForGroup;	// 208 = 0xd0
    NSMutableDictionary *_lastKnownGroupIDToPushTokens;	// 216 = 0xd8
    NSMutableDictionary *_lastKnownAccountIDToPushTokens;	// 224 = 0xe0
    NSMutableDictionary *_pendingMasterKeyMaterials;	// 232 = 0xe8
    NSTimer *_endpointUpdateTimer;	// 240 = 0xf0
    _Bool _isTestRunning;	// 248 = 0xf8
}

+ (id)sharedInstance;	// IMP=0x000000010044f240
- (void).cxx_destruct;	// IMP=0x00000001004679e4
@property(nonatomic) _Bool isTestRunning; // @synthesize isTestRunning=_isTestRunning;
- (void)account:(id)arg1 didUpdateRegisteredDevices:(id)arg2;	// IMP=0x000000010046752c
- (void)didUpdateParticipants:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100465cdc
- (_Bool)_isValidPushToken:(id)arg1;	// IMP=0x0000000100465c4c
- (void)didUpdateMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100465870
- (void)setMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100464b80
- (void)didReceiveEndpointsUpdate:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100464418
- (void)rollNewKeysAfterResettingPrekeysForGroups:(id)arg1 withReason:(long long)arg2;	// IMP=0x0000000100463e40
- (void)sendKeyMaterialsToWaitingParticipantsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00000001004637e0
- (void)removeExpiredPrekeys;	// IMP=0x000000010046361c
- (void)sendPublicKeyToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100462ee4
- (void)sendPublicKeyToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100462d90
- (void)_sendMessage:(id)arg1 toDestination:(id)arg2 forGroup:(id)arg3 sessionID:(id)arg4 command:(long long)arg5 timeout:(double)arg6 shouldExpire:(_Bool)arg7 completion:(CDUnknownBlockType)arg8 completionBlock:(CDUnknownBlockType)arg9;	// IMP=0x00000001004621b4
- (void)reportTimeDifferenceBetweenFirstPacketAndMKI:(long long)arg1 forMKI:(id)arg2 service:(id)arg3 activeParticipants:(long long)arg4;	// IMP=0x0000000100461fe4
- (void)unsubscribeEndpointsForGroup:(id)arg1;	// IMP=0x0000000100461e44
- (void)resetKeysForGroup:(id)arg1 shouldRemoveCurrentParticipants:(_Bool)arg2;	// IMP=0x0000000100461a4c
- (void)removeActiveParticipant:(id)arg1 forGroup:(id)arg2;	// IMP=0x0000000100461548
- (void)removeLocalActiveParticipantForGroup:(id)arg1;	// IMP=0x00000001004614b0
- (id)activeParticipantsForGroup:(id)arg1;	// IMP=0x00000001004613cc
- (void)resetDevicePrekey;	// IMP=0x00000001004612f0
- (_Bool)_shouldEnforceRemoteTimeout;	// IMP=0x0000000100461120
- (double)_multiwayFTMessageSendTimeout;	// IMP=0x0000000100460f48
- (void)sendKeyMaterialsToLocal:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100460bcc
- (void)_sendKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg4;	// IMP=0x000000010045eb90
- (void)resetKeyMaterialLocalSentStatus:(id)arg1;	// IMP=0x000000010045e900
- (id)_protectedCachedKeyMaterialsForDestination:(id)arg1 pushToken:(id)arg2 forGroup:(id)arg3 outURIs:(id *)arg4 includePeers:(_Bool)arg5;	// IMP=0x000000010045d9a0
- (void)sendPendingKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 forDevice:(id)arg3 fromID:(id)arg4;	// IMP=0x000000010045d614
- (id)masterKeyMaterialForGroup:(id)arg1;	// IMP=0x000000010045d3ac
- (void)noteReceivedGroupMasterKeyMaterials:(id)arg1 URIs:(id)arg2 sessionID:(id)arg3;	// IMP=0x000000010045cff0
- (void)requestPendingKeyMaterialsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x000000010045cc88
- (id)setMasterKeyMaterial:(id)arg1 forDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 fromSender:(_Bool)arg6 error:(id *)arg7;	// IMP=0x000000010045b050
- (_Bool)_storePendingKeyMaterial:(id)arg1 forDevice:(id)arg2;	// IMP=0x000000010045ad5c
- (void)processIncomingPrekeyRecoveryRequest:(id)arg1 fromDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6;	// IMP=0x000000010045a738
- (void)sendMKMRecoveryRequestToParticipants:(id)arg1 senderID:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4;	// IMP=0x000000010045a08c
- (void)sendMKMRecoveryRequestToGroup:(id)arg1;	// IMP=0x0000000100459ae0
- (void)sendMKMRecoveryRequestToDevice:(id)arg1 fromID:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4;	// IMP=0x0000000100459320
- (void)createKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100458340
- (void)_stopMkmExpirationTimer;	// IMP=0x00000001004581fc
- (void)_startMkmExpirationTimer:(int)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000100457e58
- (void)_handleMkmExpirationTimer;	// IMP=0x0000000100457d30
- (void)_stopMkmRollTimer;	// IMP=0x0000000100457bec
- (void)_startMkmRollTimer:(int)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000100457848
- (void)_handleMkmRollTimer;	// IMP=0x0000000100457710
- (void)cleanUpExpiredMasterKeyMaterial;	// IMP=0x0000000100456eb8
- (void)sendPrekeyRequestToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x0000000100456b04
- (void)sendPrekeyRequestToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00000001004569b0
- (id)publicKeys;	// IMP=0x0000000100456670
- (id)realTimeEncryptionPublicKeyDataForDevice:(id)arg1;	// IMP=0x0000000100456420
- (void)_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:(id)arg1 remoteToken:(id)arg2 previousRemotePublicKey:(id)arg3 newRemotePublicKey:(id)arg4;	// IMP=0x0000000100456040
- (_Bool)setRealTimeEncryptionPublicKey:(id)arg1 forDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6;	// IMP=0x0000000100454fe8
- (void)reportPrekeyAckStatus:(id)arg1;	// IMP=0x0000000100454e90
- (void)processIncomingPrekeyAckForGroup:(id)arg1;	// IMP=0x0000000100454cb4
- (id)realTimeEncryptionPublicKeyData;	// IMP=0x0000000100454498
- (id)createRealTimeEncryptionFullIdentityForDevice:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000100453480
- (void)_startMKMRecovery;	// IMP=0x000000010045335c
- (void)_doCheckPendingMasterKeyMaterialsAndSendMKMRecoveryRequest;	// IMP=0x0000000100452b5c
- (void)_dispatchRenewPrekeyTimer;	// IMP=0x0000000100452838
- (void)_sendRenewedPrekeysToGroups;	// IMP=0x00000001004524ec
- (void)_noteKeyMaterialDidSendToDestination:(id)arg1 groupID:(id)arg2 withSuccess:(_Bool)arg3;	// IMP=0x00000001004520b4
- (void)_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:(id)arg1;	// IMP=0x0000000100451a14
- (id)_pruneInvalidAndLocalPushTokensFromTokens:(id)arg1;	// IMP=0x00000001004518e4
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5;	// IMP=0x00000001004512f4
- (void)reliablyRequestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x0000000100451254
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00000001004511b8
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3;	// IMP=0x00000001004510f0
- (void)removeAccountForGroup:(id)arg1;	// IMP=0x0000000100450cfc
- (void)setAccount:(id)arg1 fromID:(id)arg2 forGroup:(id)arg3;	// IMP=0x0000000100450750
- (id)_locked_ensureGroupMasterKeyMaterialCacheForGroup:(id)arg1;	// IMP=0x0000000100450438
- (_Bool)_isUsingAccount:(id)arg1;	// IMP=0x0000000100450234
- (id)_localDevicePushToken;	// IMP=0x00000001004501cc
- (id)init;	// IMP=0x000000010044f3d4

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

