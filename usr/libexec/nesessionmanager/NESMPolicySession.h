//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMutableArray, NSMutableDictionary, NSUUID;

@interface NESMPolicySession : NSObject
{
    int _sessionType;	// 8 = 0x8
    NSUUID *_configUUID;	// 16 = 0x10
    long long _grade;	// 24 = 0x18
    long long _tunnelType;	// 32 = 0x20
    long long _tunnelKind;	// 40 = 0x28
    NSMutableArray *_policyIDs;	// 48 = 0x30
    NSMutableArray *_policyIDsLow;	// 56 = 0x38
    NSMutableArray *_controlPolicyIDs;	// 64 = 0x40
    NSMutableArray *_tunnelPolicyIDs;	// 72 = 0x48
    NSMutableArray *_onDemandPolicyIDs;	// 80 = 0x50
    NSMutableArray *_dropControlPolicyIDs;	// 88 = 0x58
    NSMutableArray *_skipPolicyIDs;	// 96 = 0x60
    NSMutableArray *_NexusPolicyIDs;	// 104 = 0x68
    NSMutableArray *_dnsPolicyIDs;	// 112 = 0x70
    NSMutableDictionary *_interfaceDropControlPolicyIDs;	// 120 = 0x78
    NSMutableDictionary *_interfaceControlPolicyIDs;	// 128 = 0x80
    NSMutableDictionary *_interfaceTunnelPolicyIDs;	// 136 = 0x88
    NSMutableDictionary *_pathRuleDenyMulticastPolicyIDs;	// 144 = 0x90
    NSMutableDictionary *_applicationExceptionPolicyIDs;	// 152 = 0x98
}

+ (id)defaultTrafficClassCondition;	// IMP=0x000000010002da74
+ (id)pausedTrafficClassCondition;	// IMP=0x000000010002da58
+ (id)bestEffortTrafficClassCondition;	// IMP=0x000000010002da3c
- (void).cxx_destruct;	// IMP=0x0000000100045c80
@property(retain) NSMutableDictionary *applicationExceptionPolicyIDs; // @synthesize applicationExceptionPolicyIDs=_applicationExceptionPolicyIDs;
@property(retain) NSMutableDictionary *pathRuleDenyMulticastPolicyIDs; // @synthesize pathRuleDenyMulticastPolicyIDs=_pathRuleDenyMulticastPolicyIDs;
@property(retain) NSMutableDictionary *interfaceTunnelPolicyIDs; // @synthesize interfaceTunnelPolicyIDs=_interfaceTunnelPolicyIDs;
@property(retain) NSMutableDictionary *interfaceControlPolicyIDs; // @synthesize interfaceControlPolicyIDs=_interfaceControlPolicyIDs;
@property(retain) NSMutableDictionary *interfaceDropControlPolicyIDs; // @synthesize interfaceDropControlPolicyIDs=_interfaceDropControlPolicyIDs;
@property(retain) NSMutableArray *dnsPolicyIDs; // @synthesize dnsPolicyIDs=_dnsPolicyIDs;
@property(retain) NSMutableArray *NexusPolicyIDs; // @synthesize NexusPolicyIDs=_NexusPolicyIDs;
@property(retain) NSMutableArray *skipPolicyIDs; // @synthesize skipPolicyIDs=_skipPolicyIDs;
@property(retain) NSMutableArray *dropControlPolicyIDs; // @synthesize dropControlPolicyIDs=_dropControlPolicyIDs;
@property(retain) NSMutableArray *onDemandPolicyIDs; // @synthesize onDemandPolicyIDs=_onDemandPolicyIDs;
@property(retain) NSMutableArray *tunnelPolicyIDs; // @synthesize tunnelPolicyIDs=_tunnelPolicyIDs;
@property(retain) NSMutableArray *controlPolicyIDs; // @synthesize controlPolicyIDs=_controlPolicyIDs;
@property(retain) NSMutableArray *policyIDsLow; // @synthesize policyIDsLow=_policyIDsLow;
@property(retain) NSMutableArray *policyIDs; // @synthesize policyIDs=_policyIDs;
@property long long tunnelKind; // @synthesize tunnelKind=_tunnelKind;
@property long long tunnelType; // @synthesize tunnelType=_tunnelType;
@property long long grade; // @synthesize grade=_grade;
@property int sessionType; // @synthesize sessionType=_sessionType;
@property(retain) NSUUID *configUUID; // @synthesize configUUID=_configUUID;
- (_Bool)setSkipPoliciesForInterface:(id)arg1 matchDomains:(id)arg2 isPrimary:(_Bool)arg3;	// IMP=0x00000001000455b4
- (_Bool)setPoliciesForDNSSettingsWithAgentUUID:(id)arg1 matchDomains:(id)arg2 exceptionDomains:(id)arg3 captiveNetworkPluginBundleIDs:(id)arg4;	// IMP=0x0000000100044854
- (_Bool)setPoliciesForDNSProxyProcess:(id)arg1 withFlowDivertControlUnit:(unsigned int)arg2 captiveNetworkPluginBundleIDs:(id)arg3;	// IMP=0x0000000100043998
- (_Bool)setApplicationExceptionTunnelDataPolicies:(id)arg1 applicationExceptions:(id)arg2;	// IMP=0x00000001000438a8
- (_Bool)setApplicationExceptionTunnelDataPolicies:(id)arg1 applicationExceptions:(id)arg2 masterSession:(id)arg3;	// IMP=0x00000001000435e4
- (_Bool)setAOVPNTunnelDataPoliciesForInterfaceName:(id)arg1 delegateInterfaceName:(id)arg2 isSecondaryConnection:(_Bool)arg3 hasDNS:(_Bool)arg4 hasProxy:(_Bool)arg5 cellularServicesExceptionAction:(long long)arg6 applicationExceptions:(id)arg7;	// IMP=0x00000001000426c4
- (_Bool)setAOVPNTunnelControlPoliciesForPluginPID:(int)arg1 pluginUUIDs:(id)arg2 delegateInterfaceName:(id)arg3 allowSecuritydTraffic:(_Bool)arg4;	// IMP=0x0000000100041a44
- (_Bool)setTunnelPoliciesforNexusInterface:(id)arg1;	// IMP=0x0000000100041698
- (_Bool)setAOVPNTunnelDropControlPolicies:(id)arg1 pluginUUIDs:(id)arg2;	// IMP=0x0000000100041108
- (_Bool)setDropPoliciesForPluginUUIDs:(id)arg1;	// IMP=0x0000000100040cc8
- (_Bool)setAOVPNTunnelControlPoliciesAllowSecuritydForAgentPID:(id)arg1 neagentPid:(int)arg2 neagentUUIDs:(id)arg3 result:(id)arg4 controlPolicyIDs:(id)arg5 order:(unsigned int *)arg6;	// IMP=0x000000010003fdac
- (_Bool)setFlowDivertPoliciesForNetworkRules:(id)arg1 excludeRules:(id)arg2 flowDivertControlUnit:(unsigned int)arg3 hasDNS:(_Bool)arg4 hasProxy:(_Bool)arg5 providerProcessIdentity:(id)arg6 isFullyTransparent:(_Bool)arg7;	// IMP=0x000000010003f604
- (void)addPoliciesForNetworkRule:(id)arg1 masterSession:(id)arg2 result:(id)arg3 order:(unsigned int)arg4;	// IMP=0x000000010003ed30
- (void)generateConditionsForAppRules:(id)arg1 includeNoSplit:(_Bool)arg2 providerUUIDs:(id)arg3 excludedDomains:(id)arg4 handler:(CDUnknownBlockType)arg5 skipHandler:(CDUnknownBlockType)arg6;	// IMP=0x000000010003db0c
- (_Bool)setPoliciesForFlowDivertRules:(id)arg1 flowDivertControlUnit:(unsigned int)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4 providerUUIDs:(id)arg5 excludedDomains:(id)arg6;	// IMP=0x000000010003d394
- (_Bool)setPoliciesForPathRules:(id)arg1 pathRouteRules:(id)arg2 fallbackBundleIDs:(id)arg3 fallbackExceptionBundleIDs:(id)arg4 fallbackBackgroundTraffic:(_Bool)arg5 netagentUUID:(id)arg6 uid:(unsigned int)arg7;	// IMP=0x000000010003b30c
- (void)applyDenyMulticastPathRule:(id)arg1 masterSession:(id)arg2 uid:(unsigned int)arg3 policyIDs:(id)arg4 hasAddedDenyMulticastRules:(_Bool *)arg5 netagentUUID:(id)arg6;	// IMP=0x0000000100039f64
- (_Bool)setPoliciesForAppRules:(id)arg1 interfaceName:(id)arg2 agentPIDs:(id)arg3 hasDNS:(_Bool)arg4 hasProxy:(_Bool)arg5 criticalDomains:(id)arg6 excludedDomains:(id)arg7;	// IMP=0x0000000100038f94
- (id)configAgentUUIDForFlowDivertUnit:(unsigned int)arg1 type:(id)arg2;	// IMP=0x0000000100038e9c
- (id)configAgentUUIDForInterface:(id)arg1 type:(id)arg2;	// IMP=0x0000000100038d98
- (_Bool)setFallbackPoliciesForExceptionAppRules:(id)arg1 interfaceName:(id)arg2 uid:(unsigned int)arg3;	// IMP=0x00000001000380e0
- (_Bool)setPoliciesForExceptionAppRules:(id)arg1 interfaceName:(id)arg2 uid:(unsigned int)arg3;	// IMP=0x00000001000374b8
- (void)updateAppRuleUUIDs:(id)arg1 uid:(unsigned int)arg2;	// IMP=0x0000000100037268
- (id)copyUUIDsForAppRule:(id)arg1 allowSynthesis:(_Bool)arg2 uid:(unsigned int)arg3;	// IMP=0x0000000100037060
- (_Bool)setPolicyForContentFilterControlUnit:(unsigned int)arg1 providerProcessIdentity:(id)arg2 uid:(unsigned int)arg3 settings:(id)arg4 limitToProcess:(id)arg5;	// IMP=0x0000000100036284
- (_Bool)setPassPoliciesForContentFilter:(id)arg1 order:(unsigned int *)arg2;	// IMP=0x000000010003611c
- (_Bool)setTunnelRouteEnforecementPoliciesForInterfaceName:(id)arg1 outgoingInterfaceName:(id)arg2 agentPIDs:(id)arg3 includeIPv4Routes:(id)arg4 includeIPv6Routes:(id)arg5 excludeIPv4Routes:(id)arg6 excludeIPv6Routes:(id)arg7 hasExcludeLocalNetworks:(_Bool)arg8;	// IMP=0x00000001000347b8
- (_Bool)setFallbackTunnelDataPoliciesForInterfaceName:(id)arg1 outgoingInterfaceName:(id)arg2 isPrimary:(_Bool)arg3 includeRoutes:(id)arg4 excludeRoutes:(id)arg5 domains:(id)arg6;	// IMP=0x0000000100033814
- (_Bool)setTunnelDataPoliciesForInterfaceName:(id)arg1 outgoingInterfaceName:(id)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4 hasExcludeLocalNetworks:(_Bool)arg5;	// IMP=0x0000000100032e3c
- (_Bool)setVPNDNSPoliciesForAgentUUID:(id)arg1 interfaceName:(id)arg2 matchDomains:(id)arg3 isPrimary:(_Bool)arg4;	// IMP=0x00000001000328bc
- (_Bool)setControlPassPolicyForVPNAgentWithPID:(int)arg1 outgoingInterfaceName:(id)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4;	// IMP=0x0000000100031b14
- (_Bool)setPolicyForVPNAgentWithPIDs:(id)arg1 outgoingInterfaceName:(id)arg2 hasDNS:(_Bool)arg3 hasProxy:(_Bool)arg4;	// IMP=0x00000001000313b4
- (_Bool)setOnDemandPoliciesForRule:(id)arg1 appRules:(id)arg2 netagentUUID:(id)arg3 criticalDomains:(id)arg4 excludedDomains:(id)arg5;	// IMP=0x0000000100030b7c
- (_Bool)setFallbackOnDemandPoliciesForRule:(id)arg1 netagentUUID:(id)arg2 uid:(unsigned int)arg3 pauseLevel:(long long)arg4 primaryInterfaceName:(id)arg5 criticalDomains:(id)arg6;	// IMP=0x000000010002f2a0
- (_Bool)setOnDemandPoliciesForRule:(id)arg1 netagentUUID:(id)arg2 uid:(unsigned int)arg3 pauseLevel:(long long)arg4 primaryInterfaceName:(id)arg5 criticalDomains:(id)arg6;	// IMP=0x000000010002da90
- (_Bool)removePathControllerPolicies;	// IMP=0x000000010002d708
- (_Bool)removeDNSPolicies;	// IMP=0x000000010002d588
- (_Bool)removeSkipPolicies;	// IMP=0x000000010002d408
- (_Bool)removeTunnelPoliciesforNexusInterface;	// IMP=0x000000010002d2c4
- (_Bool)removeOnDemandPolicies;	// IMP=0x000000010002d0d0
- (_Bool)removeApplicationExceptionPoliciesForDelegateInterface:(id)arg1;	// IMP=0x000000010002d014
- (_Bool)removeApplicationExceptionPoliciesForDelegateInterface:(id)arg1 masterSession:(id)arg2;	// IMP=0x000000010002ce9c
- (_Bool)removePoliciesForDelegateInterface:(id)arg1;	// IMP=0x000000010002cc94
- (_Bool)removeContentFilterPolicies;	// IMP=0x000000010002c9c4
- (_Bool)removePolicies;	// IMP=0x000000010002c7c0
- (_Bool)removeDropControlPolicies;	// IMP=0x000000010002c634
- (_Bool)removeControlPoliciesForDelegateInterface:(id)arg1;	// IMP=0x000000010002c42c
- (_Bool)removeDropControlPoliciesForDelegateInterface:(id)arg1;	// IMP=0x000000010002c224
- (_Bool)removeTunnelDataPolicies;	// IMP=0x000000010002c030
- (_Bool)removeControlPolicies;	// IMP=0x000000010002be3c
- (_Bool)unregisterSession;	// IMP=0x000000010002bd5c
- (_Bool)registerSession;	// IMP=0x000000010002bc7c
- (unsigned int)skipDenyMulticastOrder;	// IMP=0x000000010002bc74
- (unsigned int)denyMulticastOrder;	// IMP=0x000000010002bc6c
- (unsigned int)preFilterOrder;	// IMP=0x000000010002bc64
- (unsigned int)dropAgentOrder;	// IMP=0x000000010002bc5c
- (unsigned int)fallbackOrder;	// IMP=0x000000010002bc54
- (unsigned int)postDNSSettingsOrder;	// IMP=0x000000010002bc4c
- (unsigned int)preDNSSettingsOrder;	// IMP=0x000000010002bc44
- (unsigned int)order;	// IMP=0x000000010002babc
- (void)dealloc;	// IMP=0x000000010002b8b8
- (id)initWithConfigurationID:(id)arg1 sessionType:(int)arg2 grade:(long long)arg3 tunnelType:(long long)arg4;	// IMP=0x000000010002b8a8
- (id)initWithConfigurationID:(id)arg1 sessionType:(int)arg2 grade:(long long)arg3 tunnelType:(long long)arg4 tunnelKind:(long long)arg5;	// IMP=0x000000010002b6c4
- (id)init;	// IMP=0x000000010002b69c

@end

