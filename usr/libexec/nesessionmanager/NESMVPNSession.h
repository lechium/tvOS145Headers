//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "NESMSession.h"

#import "NEVPNAuthenticationPluginDelegate-Protocol.h"
#import "NEVPNTunnelPluginDelegate-Protocol.h"

@class NEDNSSettingsNetworkAgent, NESMVPNSessionRetryCounter, NESMVPNSessionState, NETunnelNetworkSettings, NEUserNotification, NEVPNAuthenticationPlugin, NEVPNProtocol, NEVPNTunnelPlugin, NSMutableArray, NSMutableDictionary, NSObject, NSString, NWNetworkAgentRegistration, NWPathEvaluator;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_xpc_object;

@interface NESMVPNSession : NESMSession <NEVPNAuthenticationPluginDelegate, NEVPNTunnelPluginDelegate>
{
    _Bool _isSecondaryConnection;	// 8 = 0x8
    _Bool _handlingNetworkDetectionEvent;	// 9 = 0x9
    _Bool _sleepOnDisconnect;	// 10 = 0xa
    _Bool _isSecondaryInterface;	// 11 = 0xb
    _Bool _reassertedByPlugin;	// 12 = 0xc
    _Bool _stopped;	// 13 = 0xd
    int _sessionType;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_tunnelConfigQueue;	// 24 = 0x18
    NSObject<OS_xpc_object> *_establishIPCReply;	// 32 = 0x20
    NSObject<OS_xpc_object> *_establishIPCMessage;	// 40 = 0x28
    long long _pendingConfigurationChanges;	// 48 = 0x30
    CDUnknownBlockType _pendingConfigurationChangeCompletionHandler;	// 56 = 0x38
    NSObject<OS_dispatch_source> *_pendingConfigurationChangeTimer;	// 64 = 0x40
    NWPathEvaluator *_IDSNexusPathEvaluator;	// 72 = 0x48
    unsigned long long _IDSNexusIfIndex;	// 80 = 0x50
    NSString *_IDSNexusDomain;	// 88 = 0x58
    NSObject<OS_dispatch_source> *_retryTimer;	// 96 = 0x60
    NESMVPNSessionRetryCounter *_retryCounter;	// 104 = 0x68
    CDUnknownBlockType _stopCompletionHandler;	// 112 = 0x70
    long long _state;	// 120 = 0x78
    NESMVPNSessionState *_stateHandler;	// 128 = 0x80
    NSMutableDictionary *_connectParameters;	// 136 = 0x88
    struct NEVirtualInterface_s *_virtualInterface;	// 144 = 0x90
    NEVPNAuthenticationPlugin *_authenticationPlugin;	// 152 = 0x98
    NEVPNTunnelPlugin *_primaryTunnelPlugin;	// 160 = 0xa0
    NEVPNProtocol *_protocol;	// 168 = 0xa8
    NSMutableDictionary *_cachedStateHandlers;	// 176 = 0xb0
    NETunnelNetworkSettings *_pluginConfigurationEntities;	// 184 = 0xb8
    long long _parentType;	// 192 = 0xc0
    NESMSession *_parent;	// 200 = 0xc8
    long long _tunnelKind;	// 208 = 0xd0
    NSString *_interfaceName;	// 216 = 0xd8
    NSMutableArray *_setConfigurationCompletionHandlerArray;	// 224 = 0xe0
    CDUnknownBlockType _pluginCompletionHandler;	// 232 = 0xe8
    NEUserNotification *_notification;	// 240 = 0xf0
    NSString *_delegateInterfaceAddress;	// 248 = 0xf8
    NEDNSSettingsNetworkAgent *_dnsAgent;	// 256 = 0x100
    NWNetworkAgentRegistration *_dnsAgentRegistration;	// 264 = 0x108
    NSObject<OS_xpc_object> *_lastStartMessage;	// 272 = 0x110
}

- (void).cxx_destruct;	// IMP=0x0000000100028e18
@property(retain) NSObject<OS_xpc_object> *lastStartMessage; // @synthesize lastStartMessage=_lastStartMessage;
@property _Bool stopped; // @synthesize stopped=_stopped;
@property(retain) NWNetworkAgentRegistration *dnsAgentRegistration; // @synthesize dnsAgentRegistration=_dnsAgentRegistration;
@property(retain) NEDNSSettingsNetworkAgent *dnsAgent; // @synthesize dnsAgent=_dnsAgent;
@property(retain) NSString *delegateInterfaceAddress; // @synthesize delegateInterfaceAddress=_delegateInterfaceAddress;
@property(retain) NEUserNotification *notification; // @synthesize notification=_notification;
@property _Bool reassertedByPlugin; // @synthesize reassertedByPlugin=_reassertedByPlugin;
@property(copy) CDUnknownBlockType pluginCompletionHandler; // @synthesize pluginCompletionHandler=_pluginCompletionHandler;
@property(retain) NSMutableArray *setConfigurationCompletionHandlerArray; // @synthesize setConfigurationCompletionHandlerArray=_setConfigurationCompletionHandlerArray;
@property(retain) NSString *interfaceName; // @synthesize interfaceName=_interfaceName;
@property long long tunnelKind; // @synthesize tunnelKind=_tunnelKind;
@property _Bool isSecondaryInterface; // @synthesize isSecondaryInterface=_isSecondaryInterface;
@property __weak NESMSession *parent; // @synthesize parent=_parent;
@property long long parentType; // @synthesize parentType=_parentType;
@property(retain) NETunnelNetworkSettings *pluginConfigurationEntities; // @synthesize pluginConfigurationEntities=_pluginConfigurationEntities;
@property(retain) NSMutableDictionary *cachedStateHandlers; // @synthesize cachedStateHandlers=_cachedStateHandlers;
@property(retain) NEVPNProtocol *protocol; // @synthesize protocol=_protocol;
@property(retain) NEVPNTunnelPlugin *primaryTunnelPlugin; // @synthesize primaryTunnelPlugin=_primaryTunnelPlugin;
@property(retain) NEVPNAuthenticationPlugin *authenticationPlugin; // @synthesize authenticationPlugin=_authenticationPlugin;
@property struct NEVirtualInterface_s *virtualInterface; // @synthesize virtualInterface=_virtualInterface;
@property _Bool sleepOnDisconnect; // @synthesize sleepOnDisconnect=_sleepOnDisconnect;
@property(retain) NSMutableDictionary *connectParameters; // @synthesize connectParameters=_connectParameters;
@property(retain) NESMVPNSessionState *stateHandler; // @synthesize stateHandler=_stateHandler;
@property int sessionType; // @synthesize sessionType=_sessionType;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(copy) CDUnknownBlockType stopCompletionHandler; // @synthesize stopCompletionHandler=_stopCompletionHandler;
@property(retain) NESMVPNSessionRetryCounter *retryCounter; // @synthesize retryCounter=_retryCounter;
@property(retain) NSObject<OS_dispatch_source> *retryTimer; // @synthesize retryTimer=_retryTimer;
@property(retain) NSString *IDSNexusDomain; // @synthesize IDSNexusDomain=_IDSNexusDomain;
@property unsigned long long IDSNexusIfIndex; // @synthesize IDSNexusIfIndex=_IDSNexusIfIndex;
@property(retain) NWPathEvaluator *IDSNexusPathEvaluator; // @synthesize IDSNexusPathEvaluator=_IDSNexusPathEvaluator;
@property _Bool handlingNetworkDetectionEvent; // @synthesize handlingNetworkDetectionEvent=_handlingNetworkDetectionEvent;
@property(retain) NSObject<OS_dispatch_source> *pendingConfigurationChangeTimer; // @synthesize pendingConfigurationChangeTimer=_pendingConfigurationChangeTimer;
@property(copy) CDUnknownBlockType pendingConfigurationChangeCompletionHandler; // @synthesize pendingConfigurationChangeCompletionHandler=_pendingConfigurationChangeCompletionHandler;
@property long long pendingConfigurationChanges; // @synthesize pendingConfigurationChanges=_pendingConfigurationChanges;
@property(retain) NSObject<OS_xpc_object> *establishIPCMessage; // @synthesize establishIPCMessage=_establishIPCMessage;
@property(retain) NSObject<OS_xpc_object> *establishIPCReply; // @synthesize establishIPCReply=_establishIPCReply;
@property(retain) NSObject<OS_dispatch_queue> *tunnelConfigQueue; // @synthesize tunnelConfigQueue=_tunnelConfigQueue;
- (void)stopIfNecessaryWithReason:(int)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100028900
- (id)copyAuthenticationPluginBundleForPluginType:(id)arg1 bundleIdentifier:(id)arg2;	// IMP=0x00000001000282c8
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000100027e28
- (void)unwatchIDSNexusPath;	// IMP=0x0000000100027d04
- (void)watchIDSNexusPath;	// IMP=0x0000000100027b64
- (void)invalidate;	// IMP=0x0000000100027b00
- (void)handleInstalledAppsChanged;	// IMP=0x00000001000279b4
- (_Bool)resetPerAppPolicy;	// IMP=0x00000001000272ac
- (id)createAppRuleUUIDMap;	// IMP=0x000000010002700c
- (_Bool)prepareConfigurationForStart;	// IMP=0x0000000100026fb8
@property(readonly) NSString *pluginType;
- (_Bool)handleUpdateConfiguration:(id)arg1;	// IMP=0x00000001000268e4
- (void)prepareNetwork;	// IMP=0x0000000100026748
- (void)setLastDisconnectError:(id)arg1;	// IMP=0x0000000100026698
- (void)setLastStopReason:(int)arg1;	// IMP=0x00000001000265fc
- (void)setStatus:(int)arg1;	// IMP=0x00000001000263cc
- (unsigned char)isInterfaceIPAvailable:(const char *)arg1;	// IMP=0x000000010002627c
@property _Bool isSecondaryConnection;
- (int)getReassertTimeout;	// IMP=0x00000001000260ac
- (void)uninstall;	// IMP=0x0000000100025940
- (void)setConfiguration;	// IMP=0x000000010002520c
- (_Bool)updateDNSSkipPolicies;	// IMP=0x0000000100024f70
- (_Bool)removeTunnelDataPolicies;	// IMP=0x0000000100024f24
- (_Bool)applyTunnelRouteEnforcementPolicies;	// IMP=0x0000000100024b44
- (_Bool)applyTunnelDataPolicies;	// IMP=0x000000010002475c
- (_Bool)applyFallbackTunnelDataPolicies;	// IMP=0x000000010002439c
- (void)handleNetworkConfigurationChange:(long long)arg1;	// IMP=0x00000001000241b8
- (void)queueChangesToTunnelConfiguration:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010002397c
- (void)updateRouteCache;	// IMP=0x00000001000234b0
- (_Bool)setupVirtualInterface;	// IMP=0x0000000100022824
- (int)getVirtualInterfaceMTU:(id)arg1;	// IMP=0x00000001000227d4
- (_Bool)setupDNS;	// IMP=0x00000001000219f8
- (void)removeDNSAgent;	// IMP=0x000000010002188c
- (_Bool)setupProxies;	// IMP=0x00000001000215a8
- (void)resetVirtualInterface;	// IMP=0x00000001000213a4
- (void)setDelegateInterfaceAddressFromInterfaceWithName:(id)arg1;	// IMP=0x000000010002128c
- (void)handleSetConfigurationResult:(_Bool)arg1;	// IMP=0x0000000100020ecc
- (id)copyTunnelInterfaceName;	// IMP=0x0000000100020eb0
- (void)popSetConfigurationCompletionHandler:(id)arg1;	// IMP=0x0000000100020ca8
- (void)pushSetConfigurationCompletionHandler;	// IMP=0x0000000100020b90
- (void)installPended;	// IMP=0x0000000100020b80
- (void)install;	// IMP=0x0000000100020ab8
- (void)requestUninstall;	// IMP=0x0000000100020a20
- (void)requestInstall;	// IMP=0x00000001000208c0
- (void)setEndpointInEstablishIPCReply:(id)arg1 forPlugin:(id)arg2;	// IMP=0x00000001000207d4
- (_Bool)shouldSendIPCAttachForPlugin:(id)arg1;	// IMP=0x0000000100020688
@property(readonly) _Bool establishIPCPending;
- (void)sendEstablishIPCReply;	// IMP=0x00000001000204ec
- (void)plugin:(id)arg1 didAttachIPCWithEndpoint:(id)arg2;	// IMP=0x0000000100020464
- (void)plugin:(id)arg1 didSetConfiguration:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000201c0
- (_Bool)addRoutes:(struct __CFArray *)arg1 excluded:(_Bool)arg2 inetFamily:(int)arg3;	// IMP=0x000000010001fd30
- (_Bool)pinPlugin:(id)arg1 toConfigurationWithProcesses:(id)arg2;	// IMP=0x000000010001fd28
- (void)setDelegateInterfaceName:(id)arg1;	// IMP=0x000000010001fabc
- (void)plugin:(id)arg1 didInitializeWithUUIDs:(id)arg2;	// IMP=0x000000010001f9b8
- (void)plugin:(id)arg1 didStartWithPID:(int)arg2 error:(id)arg3;	// IMP=0x000000010001f3e4
- (struct NEVirtualInterface_s *)plugin:(id)arg1 didRequestVirtualInterfaceOfType:(long long)arg2 maxPendingPackets:(unsigned long long)arg3;	// IMP=0x000000010001f044
- (void)pluginDidClearConfiguration:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010001eefc
- (void)plugin:(id)arg1 didSetStatus:(long long)arg2 andDisconnectError:(id)arg3;	// IMP=0x000000010001ebd8
- (void)plugin:(id)arg1 didSetStatus:(long long)arg2 andStopReason:(int)arg3;	// IMP=0x000000010001ea24
- (void)pluginDidDetachIPC:(id)arg1;	// IMP=0x000000010001e9b8
- (void)pluginDidAcknowledgeSleep:(id)arg1;	// IMP=0x000000010001e92c
- (void)plugin:(id)arg1 didFinishAuthenticationWithResults:(id)arg2 status:(int)arg3 andError:(id)arg4;	// IMP=0x000000010001e878
- (void)pluginDidDispose:(id)arg1;	// IMP=0x000000010001e6f0
- (void)handleCaptiveNetworkPluginsChanged;	// IMP=0x000000010001e638
- (void)handleNetworkDetectionNotification:(int)arg1;	// IMP=0x000000010001e4c0
- (void)handleNetworkPrepareResult:(id)arg1;	// IMP=0x000000010001e42c
- (void)handleChangeEventForInterface:(id)arg1 newFlags:(unsigned long long)arg2 previousFlags:(unsigned long long)arg3;	// IMP=0x000000010001df70
- (void)notifyPluginInterfaceChangeEvent:(id)arg1 delegateInterface:(id)arg2 flags:(unsigned long long)arg3;	// IMP=0x000000010001de1c
- (void)resetPluginPolicies:(_Bool)arg1 ifHasProxy:(_Bool)arg2 ifname:(id)arg3;	// IMP=0x000000010001d7c8
- (_Bool)proxyEnabled:(id)arg1;	// IMP=0x000000010001d63c
- (id)pluginPIDArray;	// IMP=0x000000010001d458
- (_Bool)interface:(id)arg1 hasIPAddress:(id)arg2 currentFlags:(unsigned long long)arg3;	// IMP=0x000000010001d2b8
- (void)handleUserSwitch;	// IMP=0x000000010001d1e0
- (void)handleUserLogin;	// IMP=0x000000010001d1dc
- (void)handleUserLogout;	// IMP=0x000000010001d104
- (void)handleWakeup;	// IMP=0x000000010001d02c
- (void)handleSleepTime:(double)arg1;	// IMP=0x000000010001ceac
- (_Bool)handleSleep;	// IMP=0x000000010001cde8
- (id)copyExtendedStatus;	// IMP=0x000000010001c4ac
- (id)copyStatistics;	// IMP=0x000000010001c3dc
- (void)handleGetInfoMessage:(id)arg1 withType:(int)arg2;	// IMP=0x000000010001c30c
- (void)handleEstablishIPCMessage:(id)arg1;	// IMP=0x000000010001bdec
- (void)handleStopMessageWithReason:(int)arg1;	// IMP=0x000000010001bd50
- (void)handleStartMessage:(id)arg1;	// IMP=0x000000010001b9f0
- (void)registerSession:(id)arg1 fromClient:(id)arg2;	// IMP=0x000000010001b91c
- (void)unsetDefaultDropAll;	// IMP=0x000000010001b658
- (void)setDefaultDropAll;	// IMP=0x000000010001af44
- (void)createConnectParametersWithStartMessage:(id)arg1;	// IMP=0x0000000100019d80
- (void)handleInitializeState;	// IMP=0x0000000100019afc
- (void)checkPluginInstalledWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000197ac
- (_Bool)initializePlugins;	// IMP=0x00000001000193c8
- (id)createAgent;	// IMP=0x00000001000190b0
- (void)resetProviderDesignatedRequirementInConfiguration:(id)arg1;	// IMP=0x0000000100018fa0
@property(retain, nonatomic) NSString *providerDesignatedRequirement;
@property(readonly, nonatomic) NSString *authenticationPluginBundleIdentifier;
@property(readonly, nonatomic) NSString *providerBundleIdentifier;
- (_Bool)hasProviderWithBundleIdentifier:(id)arg1;	// IMP=0x0000000100018db4
@property(readonly, nonatomic) long long agentPluginClass;
- (void)addDefaultDropPolicyForPluginUUIDs:(id)arg1;	// IMP=0x0000000100018c14
- (void)retry;	// IMP=0x00000001000183e0
- (_Bool)skipRetry;	// IMP=0x0000000100018238
- (void)resetRetryInterval;	// IMP=0x0000000100018184
- (long long)getNextRetryInterval;	// IMP=0x0000000100017f50
- (void)dealloc;	// IMP=0x0000000100017e20
- (int)type;	// IMP=0x0000000100017e14
- (id)description;	// IMP=0x0000000100017c60
- (id)initWithConfiguration:(id)arg1 andServer:(id)arg2 andProtocol:(id)arg3 andPluginType:(id)arg4 andSessionType:(int)arg5;	// IMP=0x0000000100017c2c
- (id)initWithConfiguration:(id)arg1 andServer:(id)arg2 andProtocol:(id)arg3 andPluginType:(id)arg4 andSessionType:(int)arg5 sessionQueue:(id)arg6 messageQueue:(id)arg7 tunnelKind:(long long)arg8 parent:(id)arg9;	// IMP=0x00000001000175bc
- (id)stringForTunnelKind;	// IMP=0x0000000100017578

@end

