//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "CKKSCKRecordHolder.h"

@class CKKSAESSIVKey, CKKSKeychainBackedKey, CKKSWrappedAESSIVKey, NSString;
@protocol SecCKKSKeyClass, SecCKKSProcessedState;

__attribute__((visibility("hidden")))
@interface CKKSKey : CKKSCKRecordHolder
{
    _Bool _currentkey;	// 8 = 0x8
    CKKSKeychainBackedKey *_keycore;	// 16 = 0x10
    NSString<SecCKKSProcessedState> *_state;	// 24 = 0x18
}

+ (_Bool)intransactionRecordChanged:(id)arg1 resync:(_Bool)arg2 flagHandler:(id)arg3 error:(id *)arg4;	// IMP=0x00000001000dd9ec
+ (id)loadFromProtobuf:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dd6e4
+ (id)countsByClass:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dd508
+ (id)counts:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dd2e4
+ (id)fromDatabaseRow:(id)arg1;	// IMP=0x00000001000dcf4c
+ (id)sqlColumns;	// IMP=0x00000001000dcf40
+ (id)sqlTable;	// IMP=0x00000001000dcf34
+ (id)localKeys:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dce34
+ (id)remoteKeys:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dcd34
+ (id)allKeys:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dcc48
+ (id)currentKeysForClass:(id)arg1 state:(id)arg2 zoneID:(id)arg3 error:(id *)arg4;	// IMP=0x00000001000dcae4
+ (id)currentKeyForClass:(id)arg1 zoneID:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000dca0c
+ (id)selfWrappedKeys:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dc8ac
+ (id)tryFromDatabaseAnyState:(id)arg1 zoneID:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000dc790
+ (id)tryFromDatabase:(id)arg1 zoneID:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000dc660
+ (id)fromDatabaseAnyState:(id)arg1 zoneID:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000dc544
+ (id)fromDatabase:(id)arg1 zoneID:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000dc414
+ (id)isItemKeyForKeychainView:(struct SecDbItem *)arg1;	// IMP=0x00000001000dc13c
+ (id)keyFromKeychain:(id)arg1 parentKeyUUID:(id)arg2 keyclass:(id)arg3 state:(id)arg4 zoneID:(id)arg5 encodedCKRecord:(id)arg6 currentkey:(long long)arg7 error:(id *)arg8;	// IMP=0x00000001000dbffc
+ (id)randomKeyWrappedBySelf:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dbef8
+ (id)randomKeyWrappedByParent:(id)arg1 keyclass:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000dbda4
+ (id)randomKeyWrappedByParent:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000dbd18
+ (id)loadKeyWithUUID:(id)arg1 zoneID:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000dbca0
- (void).cxx_destruct;	// IMP=0x00000001000dbc60
@property _Bool currentkey; // @synthesize currentkey=_currentkey;
@property(copy) NSString<SecCKKSProcessedState> *state; // @synthesize state=_state;
@property(retain) CKKSKeychainBackedKey *keycore; // @synthesize keycore=_keycore;
- (id)serializeAsProtobuf:(id *)arg1;	// IMP=0x00000001000dba24
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000001000db978
- (id)sqlValues;	// IMP=0x00000001000db554
- (id)whereClauseToFindSelf;	// IMP=0x00000001000db40c
- (id)description;	// IMP=0x00000001000db2b8
- (_Bool)matchesCKRecord:(id)arg1;	// IMP=0x00000001000dae4c
- (id)updateCKRecord:(id)arg1 zoneID:(id)arg2;	// IMP=0x00000001000dab1c
- (void)setFromCKRecord:(id)arg1;	// IMP=0x00000001000da708
- (id)CKRecordName;	// IMP=0x00000001000da6b4
- (_Bool)saveToDatabaseAsOnlyCurrentKeyForClassAndState:(id *)arg1;	// IMP=0x00000001000da480
- (_Bool)deleteKeyMaterialFromKeychain:(id *)arg1;	// IMP=0x00000001000da42c
- (_Bool)loadKeyMaterialFromKeychain:(id *)arg1;	// IMP=0x00000001000da3d8
- (_Bool)saveKeyMaterialToKeychain:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000001000da374
- (_Bool)saveKeyMaterialToKeychain:(id *)arg1;	// IMP=0x00000001000da31c
- (id)decryptData:(id)arg1 authenticatedData:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000da270
- (id)encryptData:(id)arg1 authenticatedData:(id)arg2 error:(id *)arg3;	// IMP=0x00000001000da1c4
- (id)unwrapAESKey:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000da13c
- (id)wrapAESKey:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000da0b4
- (_Bool)trySelfWrappedKeyCandidate:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000da034
- (_Bool)tlkMaterialPresentOrRecoverableViaTLKShare:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000d9b78
- (_Bool)validTLK:(id *)arg1;	// IMP=0x00000001000d99c0
- (_Bool)unwrapViaTLKSharesTrustedBy:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000d94e8
- (id)unwrapViaKeyHierarchy:(id *)arg1;	// IMP=0x00000001000d91b0
- (id)ensureKeyLoaded:(id *)arg1;	// IMP=0x00000001000d8f68
- (id)topKeyInAnyState:(id *)arg1;	// IMP=0x00000001000d8c68
- (_Bool)wrapUnder:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000d8bc4
- (_Bool)wrapsSelf;	// IMP=0x00000001000d8b78
@property(readonly) CKKSAESSIVKey *aessivkey;
@property(copy) CKKSWrappedAESSIVKey *wrappedkey;
@property(copy) NSString<SecCKKSKeyClass> *keyclass;
@property(retain) NSString *parentKeyUUID;
@property(retain) NSString *uuid;
@property(readonly) NSString *zoneName;
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000001000d86cc
- (void)dealloc;	// IMP=0x00000001000d8698
- (id)initWithKeyCore:(id)arg1;	// IMP=0x00000001000d85c4
- (id)initWithWrappedAESKey:(id)arg1 uuid:(id)arg2 parentKeyUUID:(id)arg3 keyclass:(id)arg4 state:(id)arg5 zoneID:(id)arg6 encodedCKRecord:(id)arg7 currentkey:(long long)arg8;	// IMP=0x00000001000d8448
- (id)initWrappedBy:(id)arg1 AESKey:(id)arg2 uuid:(id)arg3 keyclass:(id)arg4 state:(id)arg5 zoneID:(id)arg6 encodedCKRecord:(id)arg7 currentkey:(long long)arg8;	// IMP=0x00000001000d827c
- (id)initSelfWrappedWithAESKey:(id)arg1 uuid:(id)arg2 keyclass:(id)arg3 state:(id)arg4 zoneID:(id)arg5 encodedCKRecord:(id)arg6 currentkey:(long long)arg7;	// IMP=0x00000001000d8100
- (id)init;	// IMP=0x00000001000d80cc

@end

