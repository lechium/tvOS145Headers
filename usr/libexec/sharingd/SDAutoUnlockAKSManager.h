//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "SDAutoUnlockTransportClient-Protocol.h"

@class NSData, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_source;

__attribute__((visibility("hidden")))
@interface SDAutoUnlockAKSManager : NSObject <SDAutoUnlockTransportClient>
{
    _Bool _wristDetectDisabled;	// 8 = 0x8
    _Bool _autoUnlockDisabledDueToManagement;	// 9 = 0x9
    _Bool _waitingForUnlock;	// 10 = 0xa
    _Bool _t208Machine;	// 11 = 0xb
    NSString *_localDeviceID;	// 16 = 0x10
    NSString *_state;	// 24 = 0x18
    NSData *_localAttestedLTK;	// 32 = 0x20
    NSData *_localLTK;	// 40 = 0x28
    NSString *_altDSID;	// 48 = 0x30
    NSObject<OS_dispatch_source> *_keybagAssertionTimer;	// 56 = 0x38
    NSObject<OS_dispatch_source> *_waitingForUnlockTimer;	// 64 = 0x40
    NSMutableDictionary *_remoteLTKs;	// 72 = 0x48
    NSMutableDictionary *_cachedSessions;	// 80 = 0x50
    NSMutableDictionary *_cachedSessionKeys;	// 88 = 0x58
    NSMutableDictionary *_watchIDsToPairingRecords;	// 96 = 0x60
    NSMutableDictionary *_preferredRemoteLTKForDeviceID;	// 104 = 0x68
    NSMutableArray *_watchIDsMissingSessionKey;	// 112 = 0x70
    NSString *_remoteLTKStorageFilePath;	// 120 = 0x78
    NSString *_watchIDsToPairingRecordsStorageFilePath;	// 128 = 0x80
    id _keybagAssertion;	// 136 = 0x88
    NSString *_companionIDStorageFilePath;	// 144 = 0x90
    NSString *_watchIDToCompanionIDStorageFilePath;	// 152 = 0x98
}

+ (_Bool)useKeychainForLTKSyncing;	// IMP=0x00000001000f828c
+ (id)sharedManager;	// IMP=0x00000001000ec9b8
- (void).cxx_destruct;	// IMP=0x00000001000faec4
@property(copy, nonatomic) NSString *watchIDToCompanionIDStorageFilePath; // @synthesize watchIDToCompanionIDStorageFilePath=_watchIDToCompanionIDStorageFilePath;
@property(copy, nonatomic) NSString *companionIDStorageFilePath; // @synthesize companionIDStorageFilePath=_companionIDStorageFilePath;
@property(retain) id keybagAssertion; // @synthesize keybagAssertion=_keybagAssertion;
@property(copy, nonatomic) NSString *watchIDsToPairingRecordsStorageFilePath; // @synthesize watchIDsToPairingRecordsStorageFilePath=_watchIDsToPairingRecordsStorageFilePath;
@property(copy, nonatomic) NSString *remoteLTKStorageFilePath; // @synthesize remoteLTKStorageFilePath=_remoteLTKStorageFilePath;
@property(retain, nonatomic) NSMutableArray *watchIDsMissingSessionKey; // @synthesize watchIDsMissingSessionKey=_watchIDsMissingSessionKey;
@property(retain, nonatomic) NSMutableDictionary *preferredRemoteLTKForDeviceID; // @synthesize preferredRemoteLTKForDeviceID=_preferredRemoteLTKForDeviceID;
@property(retain, nonatomic) NSMutableDictionary *watchIDsToPairingRecords; // @synthesize watchIDsToPairingRecords=_watchIDsToPairingRecords;
@property(retain, nonatomic) NSMutableDictionary *cachedSessionKeys; // @synthesize cachedSessionKeys=_cachedSessionKeys;
@property(retain, nonatomic) NSMutableDictionary *cachedSessions; // @synthesize cachedSessions=_cachedSessions;
@property(retain, nonatomic) NSMutableDictionary *remoteLTKs; // @synthesize remoteLTKs=_remoteLTKs;
@property(retain) NSObject<OS_dispatch_source> *waitingForUnlockTimer; // @synthesize waitingForUnlockTimer=_waitingForUnlockTimer;
@property(retain) NSObject<OS_dispatch_source> *keybagAssertionTimer; // @synthesize keybagAssertionTimer=_keybagAssertionTimer;
@property(copy, nonatomic) NSString *altDSID; // @synthesize altDSID=_altDSID;
@property(copy, nonatomic) NSData *localLTK; // @synthesize localLTK=_localLTK;
@property(nonatomic) _Bool t208Machine; // @synthesize t208Machine=_t208Machine;
@property(nonatomic) _Bool waitingForUnlock; // @synthesize waitingForUnlock=_waitingForUnlock;
@property(nonatomic) _Bool autoUnlockDisabledDueToManagement; // @synthesize autoUnlockDisabledDueToManagement=_autoUnlockDisabledDueToManagement;
@property(copy, nonatomic) NSData *localAttestedLTK; // @synthesize localAttestedLTK=_localAttestedLTK;
@property(nonatomic) _Bool wristDetectDisabled; // @synthesize wristDetectDisabled=_wristDetectDisabled;
@property(copy, nonatomic) NSString *state; // @synthesize state=_state;
@property(copy, nonatomic) NSString *localDeviceID; // @synthesize localDeviceID=_localDeviceID;
- (void)updateDynamicStoreEnabled;	// IMP=0x00000001000fad50
- (id)baseDictionary;	// IMP=0x00000001000facdc
- (id)baseLocalKeysDictionary;	// IMP=0x00000001000fac88
- (id)baseLocalKeysDictionaryForDevice:(id)arg1 type:(id)arg2;	// IMP=0x00000001000fabcc
- (id)baseModernSyncedDictionary;	// IMP=0x00000001000fab54
- (id)attestedDictionaryForDevice:(id)arg1;	// IMP=0x00000001000faa98
- (id)modernSyncedDictionaryForDevice:(id)arg1;	// IMP=0x00000001000fa9dc
- (id)baseSyncedDictionary;	// IMP=0x00000001000fa960
- (id)syncedDictionaryForDevice:(id)arg1;	// IMP=0x00000001000fa8a4
- (id)baseRangingDictionary;	// IMP=0x00000001000fa82c
- (id)baseRangingDictionaryForDevice:(id)arg1;	// IMP=0x00000001000fa7b4
- (id)keychainDataForQuery:(id)arg1;	// IMP=0x00000001000fa674
- (void)deleteAllRangingKeys;	// IMP=0x00000001000fa4b4
- (void)deleteRangingKeyForDeviceID:(id)arg1;	// IMP=0x00000001000fa320
- (_Bool)storeRangingKey:(id)arg1 forDeviceID:(id)arg2;	// IMP=0x00000001000fa0bc
- (id)rangingKeyForDeviceID:(id)arg1;	// IMP=0x00000001000fa05c
- (id)sessionKeyForDeviceID:(id)arg1;	// IMP=0x00000001000f9f0c
- (_Bool)sessionKeyExistsForDeviceID:(id)arg1;	// IMP=0x00000001000f9ed0
- (id)deriveKeyFromSharedSecret:(id)arg1;	// IMP=0x00000001000f9dcc
- (void)updateSessionKeys;	// IMP=0x00000001000f9b04
- (void)updateRangingKeysIfNeccesary;	// IMP=0x00000001000f97e8
- (id)ltkInfoForDeviceID:(id)arg1 modern:(_Bool)arg2 attested:(_Bool)arg3;	// IMP=0x00000001000f970c
- (id)ltkInfoForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000f96fc
- (id)ltkInfoForDeviceID:(id)arg1;	// IMP=0x00000001000f96ec
- (id)longTermKeyIDForDeviceID:(id)arg1;	// IMP=0x00000001000f9634
- (id)longTermKeyForDevice:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000f95e0
- (id)anyLongTermKeyForDeviceID:(id)arg1;	// IMP=0x00000001000f9544
- (void)deleteRemoteLongTermKeyForDeviceID:(id)arg1 modern:(_Bool)arg2 tombstone:(_Bool)arg3;	// IMP=0x00000001000f944c
- (_Bool)storeAttestedLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3;	// IMP=0x00000001000f919c
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3 modern:(_Bool)arg4;	// IMP=0x00000001000f8edc
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3;	// IMP=0x00000001000f8e1c
- (void)deleteAllEscrowSecrets;	// IMP=0x00000001000f8d40
- (void)deleteEscrowSecretForDeviceID:(id)arg1;	// IMP=0x00000001000f8c08
- (id)escrowSecretCreationDateForDeviceID:(id)arg1;	// IMP=0x00000001000f8ab8
- (_Bool)escrowSecretExistsForDevice:(id)arg1;	// IMP=0x00000001000f89e8
- (_Bool)storeEscrowSecret:(id)arg1 pairingID:(id)arg2 deviceID:(id)arg3;	// IMP=0x00000001000f8860
- (id)keyPairingIDForDeviceID:(id)arg1;	// IMP=0x00000001000f879c
- (id)escrowSecretForDevice:(id)arg1;	// IMP=0x00000001000f8410
- (_Bool)storeKeychainItemWithAttributeDictionary:(id)arg1 updateDictionary:(id)arg2 addDictionary:(id)arg3;	// IMP=0x00000001000f8294
- (id)autoUnlockFolderPath;	// IMP=0x00000001000f8184
- (id)loadCompanionIDs;	// IMP=0x00000001000f7db0
- (void)deleteLegacyCompanionIDs;	// IMP=0x00000001000f7c90
- (id)migrateLegacyCompanionIDs:(id)arg1;	// IMP=0x00000001000f7b94
- (id)loadLegacyWatchIDToCompanionIDMapping;	// IMP=0x00000001000f78e8
- (void)deleteLegacyWatchToCompanionIDs;	// IMP=0x00000001000f77c8
- (void)migrateLegacyWatchIDToCompanionIDs;	// IMP=0x00000001000f7668
- (void)loadWatchIDsToPairingRecords;	// IMP=0x00000001000f75ec
- (void)saveWatchIDsToPairingRecords;	// IMP=0x00000001000f7448
- (void)removePairingRecordForWatchID:(id)arg1;	// IMP=0x00000001000f73cc
- (void)removePairingIDForWatchID:(id)arg1;	// IMP=0x00000001000f726c
- (id)pairingIDForWatchID:(id)arg1;	// IMP=0x00000001000f71c0
- (void)setPairingID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00000001000f703c
- (void)removeCompanionIDForWatchID:(id)arg1;	// IMP=0x00000001000f6edc
- (id)companionIDForWatchID:(id)arg1;	// IMP=0x00000001000f6e30
- (void)setCompanionID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00000001000f6cac
- (id)allPairedWatchDeviceIDs;	// IMP=0x00000001000f6c58
- (void)reloadPairingRecordsIfNeeded;	// IMP=0x00000001000f6bb8
- (void)loadRemoteLTKs;	// IMP=0x00000001000f66a4
- (void)loadRemoteLTKsIfNeeded;	// IMP=0x00000001000f6650
- (void)saveRemoteLTKs;	// IMP=0x00000001000f64ac
- (void)clearRemoteLTKs;	// IMP=0x00000001000f63d0
- (void)removeRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000f62c0
- (void)addRemoteLTK:(id)arg1 ltkHash:(id)arg2 ltkModDate:(id)arg3 modernLTK:(id)arg4 modernLTKHash:(id)arg5 modernLTKModeDate:(id)arg6 deviceID:(id)arg7;	// IMP=0x00000001000f5fe8
- (_Bool)disablePairingWithKeyDevice:(id)arg1;	// IMP=0x00000001000f5f04
- (_Bool)ltkExistsForKeyDevice:(id)arg1 updateLTKs:(_Bool)arg2;	// IMP=0x00000001000f5d88
- (_Bool)ltkExistsForKeyDevice:(id)arg1;	// IMP=0x00000001000f5d78
- (void)removeAllRemoteLTKsOnSignOut;	// IMP=0x00000001000f5af8
- (void)disablePairingForAllKeyDevices;	// IMP=0x00000001000f587c
- (void)deleteEscrowSecretForPhones;	// IMP=0x00000001000f5584
- (void)deleteEscrowSecretForAllDevices;	// IMP=0x00000001000f5218
- (void)handleRequiredStateDisabled;	// IMP=0x00000001000f5214
- (_Bool)deviceEnabledAsKey:(id)arg1;	// IMP=0x00000001000f5068
- (_Bool)deviceEnabledAsKeyForAnyMac;	// IMP=0x00000001000f4e0c
- (_Bool)deviceEnabledAsKeyForAnyDevice;	// IMP=0x00000001000f4b44
- (_Bool)deviceEnabledAsKeyForAnyIDSMac;	// IMP=0x00000001000f48e8
- (_Bool)deviceEnabledAsKeyForAnyIDSDevice;	// IMP=0x00000001000f4620
- (_Bool)localDeviceEnabledAsKeyForMac;	// IMP=0x00000001000f45a4
- (_Bool)localDeviceEnabledAsKey;	// IMP=0x00000001000f4528
- (void)transport:(id)arg1 didReceivePayload:(id)arg2 type:(unsigned short)arg3 deviceID:(id)arg4;	// IMP=0x00000001000f4448
- (void)handleLTKResponse:(id)arg1;	// IMP=0x00000001000f4444
- (void)invalidateWaitingForUnlockTimer;	// IMP=0x00000001000f436c
- (void)restartWaitingForUnlockTimer;	// IMP=0x00000001000f416c
- (void)restartKeybagAssertionTimer;	// IMP=0x00000001000f3f70
- (void)releaseKeybagAssertion;	// IMP=0x00000001000f3ef4
- (void)takeMobileKeybagAssertion;	// IMP=0x00000001000f3ddc
- (_Bool)pendingReceiveForPeer:(id)arg1;	// IMP=0x00000001000f3dd4
- (_Bool)pendingSendForPeer:(id)arg1;	// IMP=0x00000001000f3dcc
- (_Bool)keychainNeedsSyncingForRequest:(id)arg1;	// IMP=0x00000001000f39ac
- (id)ltksForRequest:(id)arg1;	// IMP=0x00000001000f3408
- (void)handleLTKRequest:(id)arg1;	// IMP=0x00000001000f3404
- (void)sendLTKResponseWithPayload:(id)arg1 viewState:(id)arg2 needsUnlock:(id)arg3 currentlySyncing:(id)arg4;	// IMP=0x00000001000f3400
- (void)fetchLTKsFromCompanionForDeviceID:(id)arg1 needsLTK:(_Bool)arg2 remoteNeedsLTK:(_Bool)arg3 checkViewState:(_Bool)arg4;	// IMP=0x00000001000f33fc
- (void)fetchLTKsFromCompanion:(_Bool)arg1;	// IMP=0x00000001000f33e0
- (void)updatePreferredRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000f2ff8
- (id)remoteLTKList;	// IMP=0x00000001000f2eb8
- (id)remoteLTKEntryForDeviceID:(id)arg1;	// IMP=0x00000001000f2e38
- (id)remoteLTKHashForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000f2dc8
- (_Bool)hashMatchesAnyRemoteLTKForDeviceID:(id)arg1 ltkHash:(id)arg2 isPreferred:(_Bool *)arg3;	// IMP=0x00000001000f2a80
- (id)remoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000f2998
- (id)allRemoteLTKData;	// IMP=0x00000001000f2860
- (void)signAndStoreRemoteLTK:(id)arg1 forDeviceID:(id)arg2;	// IMP=0x00000001000f249c
- (id)signedDevices;	// IMP=0x00000001000f2338
- (id)modernSignedDevices;	// IMP=0x00000001000f21d4
- (id)modificationDataForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000f2024
- (id)keychainDevices:(_Bool)arg1;	// IMP=0x00000001000f1dd0
- (id)allKeychainDevices;	// IMP=0x00000001000f1dc0
- (_Bool)signLTK:(id)arg1 ltkModDate:(id)arg2 modernLTK:(id)arg3 modernLTKModDate:(id)arg4 deviceID:(id)arg5;	// IMP=0x00000001000f1a50
- (_Bool)signLTK:(id)arg1 modernLTK:(id)arg2 forDeviceID:(id)arg3;	// IMP=0x00000001000f1a34
- (_Bool)signLTKsForDeviceID:(id)arg1;	// IMP=0x00000001000f1980
- (void)resignRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000f1974
- (void)checkRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000f1770
- (void)checkRemoteLTKs;	// IMP=0x00000001000f176c
- (void)updateRemoteLTKs;	// IMP=0x00000001000f1758
- (void)updateLTKsForDeviceID:(id)arg1 staleRemoteLTK:(_Bool)arg2;	// IMP=0x00000001000f0fe0
- (void)generateLocalAttestedLTKIfNeccessaryWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000f0f38
- (int)ltkSyncStatusForDeviceID:(id)arg1 hash:(id)arg2 modern:(_Bool)arg3;	// IMP=0x00000001000f0d8c
- (_Bool)deviceIsLocalDevice:(id)arg1;	// IMP=0x00000001000f0d10
- (long long)keyClassForDeviceID:(id)arg1;	// IMP=0x00000001000f0c28
- (long long)ltkKeyClass;	// IMP=0x00000001000f0c20
- (void)updateLocalLTKForSignout;	// IMP=0x00000001000f0ab8
- (id)ltkHashForLocalLTK;	// IMP=0x00000001000f0a34
- (void)checkLocalLTK;	// IMP=0x00000001000f0298
- (void)generateLocalLTKWithAttestation:(_Bool)arg1 forceDCRTRetrievalWithCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000efc3c
- (void)generateLocalLTKWithAttestation:(_Bool)arg1;	// IMP=0x00000001000efc2c
- (_Bool)loadLocalLTK;	// IMP=0x00000001000ef6c0
- (id)deviceIDsMissingSessionKey;	// IMP=0x00000001000ef5a0
- (void)clearAllDeviceIDsMissingSessionKeys;	// IMP=0x00000001000ef470
- (void)removeDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00000001000ef318
- (void)addDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00000001000ef190
- (id)decryptMessage:(id)arg1 authTag:(id)arg2 nonce:(id)arg3 bluetoothID:(id)arg4 cachedDevices:(_Bool)arg5 errorCode:(long long *)arg6;	// IMP=0x00000001000ee874
- (_Bool)encryptMessageData:(id)arg1 deviceID:(id)arg2 encryptedMessage:(id *)arg3 authTag:(id *)arg4 nonce:(id *)arg5;	// IMP=0x00000001000ee590
- (_Bool)canCreateTokenSessionForDeviceID:(id)arg1;	// IMP=0x00000001000ee538
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 externalACMContext:(id)arg3;	// IMP=0x00000001000ee2c0
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00000001000ee2b0
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 usingEscrow:(_Bool)arg3 attestation:(_Bool)arg4;	// IMP=0x00000001000edfac
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00000001000edf98
- (id)aksRegistrationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00000001000ede7c
- (id)aksPairingSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 errorCode:(long long *)arg3 wantsAttestation:(_Bool)arg4;	// IMP=0x00000001000edc24
- (void)consoleUserChanged:(id)arg1;	// IMP=0x00000001000edafc
- (void)handleKeyBagLockStateChanged;	// IMP=0x00000001000edaf8
- (void)screenLockUnlocked:(id)arg1;	// IMP=0x00000001000eda48
- (void)appleAccountSignedOut:(id)arg1;	// IMP=0x00000001000ed994
- (void)appleAccountSignedIn:(id)arg1;	// IMP=0x00000001000ed928
- (void)deviceFirstUnlocked:(id)arg1;	// IMP=0x00000001000ed91c
- (void)handleManagementChanged:(id)arg1;	// IMP=0x00000001000ed8e0
- (void)addObservers;	// IMP=0x00000001000ed7a4
- (void)loadLocalUniqueIDIfNeeded;	// IMP=0x00000001000ed68c
@property(readonly, nonatomic) _Bool viewSyncing;
- (void)updateLocalLTK;	// IMP=0x00000001000ecea0
- (void)updateLTKs;	// IMP=0x00000001000ecdfc
- (void)start;	// IMP=0x00000001000ecc08
- (id)init;	// IMP=0x00000001000eca24

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

